
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/assembly-descriptor-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/assembly-descriptor-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-adls-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-adls-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-avro-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-avro-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-avro-base-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-avro-base-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-azure-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-azure-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-common-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-common-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-hadoop-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-hadoop-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-spark-2.4-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-spark-2.4-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-spark-3-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-spark-3-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-spark-base-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-spark-base-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-batch-ingestion-standalone-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-batch-ingestion-standalone-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-broker-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-broker-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.broker.api.AccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) boolean hasAccess(org.apache.pinot.broker.api.RequesterIdentity)
	---! REMOVED METHOD: PUBLIC(-) boolean hasAccess(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	---! REMOVED METHOD: PUBLIC(-) boolean hasAccess(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) boolean hasAccess(org.apache.pinot.spi.auth.broker.RequesterIdentity)
	+++  NEW METHOD: PUBLIC(+) boolean hasAccess(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	+++  NEW METHOD: PUBLIC(+) boolean hasAccess(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.broker.api.HttpRequesterIdentity  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED SUPERCLASS: org.apache.pinot.broker.api.RequesterIdentity
---! REMOVED CLASS: PUBLIC(-) ABSTRACT(-) org.apache.pinot.broker.api.RequesterIdentity  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) RequesterIdentity()
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getClientIp()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.api.resources.PinotBrokerRouting  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) org.apache.helix.HelixManager _helixManager
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.broker.broker.AllowAllAccessControlFactory$AllowAllAccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.api.AccessControl
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>)
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.broker.broker.BasicAuthAccessControlFactory$BasicAuthAccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.api.AccessControl
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity)
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>)
	---  REMOVED METHOD: PRIVATE(-) java.util.Optional<org.apache.pinot.core.auth.BasicAuthPrincipal> getPrincipalOpt(org.apache.pinot.broker.api.RequesterIdentity)
	+++  NEW METHOD: PRIVATE(+) java.util.Optional<org.apache.pinot.core.auth.BasicAuthPrincipal> getPrincipalOpt(org.apache.pinot.spi.auth.broker.RequesterIdentity)
+++  NEW CLASS: PRIVATE(+) org.apache.pinot.broker.broker.helix.BrokerUserDefinedMessageHandlerFactory$RefreshLogicalTableConfigMessageHandler  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW FIELD: FINAL(+) java.lang.String _logicalTableName
	+++  NEW CONSTRUCTOR: BrokerUserDefinedMessageHandlerFactory$RefreshLogicalTableConfigMessageHandler(org.apache.pinot.broker.broker.helix.BrokerUserDefinedMessageHandlerFactory, org.apache.pinot.common.messages.LogicalTableConfigRefreshMessage, org.apache.helix.NotificationContext)
	+++  NEW METHOD: PUBLIC(+) org.apache.helix.messaging.handling.HelixTaskResult handleMessage()
	+++  NEW METHOD: PUBLIC(+) void onError(java.lang.Exception, org.apache.helix.messaging.handling.MessageHandler$ErrorCode, org.apache.helix.messaging.handling.MessageHandler$ErrorType)
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.broker.broker.ZkBasicAuthAccessControlFactory$BasicAuthAccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.api.AccessControl
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity)
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.AuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.common.request.BrokerRequest)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.auth.TableAuthorizationResult authorize(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>)
	---  REMOVED METHOD: PRIVATE(-) java.util.Optional<org.apache.pinot.core.auth.ZkBasicAuthPrincipal> getPrincipalAuth(org.apache.pinot.broker.api.RequesterIdentity)
	+++  NEW METHOD: PRIVATE(+) java.util.Optional<org.apache.pinot.core.auth.ZkBasicAuthPrincipal> getPrincipalAuth(org.apache.pinot.spi.auth.broker.RequesterIdentity)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.broker.grpc.GrpcRequesterIdentity  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED SUPERCLASS: org.apache.pinot.broker.api.RequesterIdentity
***  MODIFIED ENUM: PRIVATE ABSTRACT STATIC org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry OFFLINE_MEM_ALLOCATED_BYTES
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry REALTIME_MEM_ALLOCATED_BYTES
+++  NEW ENUM: FINAL(+) org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry$18  (compatible)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: java.lang.constant.Constable
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry
	+++  NEW CONSTRUCTOR: PRIVATE(+) QueryLogger$QueryLogEntry$18(java.lang.String, int, java.lang.String, char)
	+++  NEW METHOD: void doFormat(java.lang.StringBuilder, org.apache.pinot.broker.querylog.QueryLogger, org.apache.pinot.broker.querylog.QueryLogger$QueryLogParams)
+++  NEW ENUM: FINAL(+) org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry$19  (compatible)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: java.lang.constant.Constable
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: org.apache.pinot.broker.querylog.QueryLogger$QueryLogEntry
	+++  NEW CONSTRUCTOR: PRIVATE(+) QueryLogger$QueryLogEntry$19(java.lang.String, int, java.lang.String, char)
	+++  NEW METHOD: void doFormat(java.lang.StringBuilder, org.apache.pinot.broker.querylog.QueryLogger, org.apache.pinot.broker.querylog.QueryLogger$QueryLogParams)
***! MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.broker.querylog.QueryLogger$QueryLogParams  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED FIELD: PRIVATE FINAL org.apache.pinot.spi.auth.broker.RequesterIdentity (<- org.apache.pinot.broker.api.RequesterIdentity) _identity
	---! REMOVED CONSTRUCTOR: PUBLIC(-) QueryLogger$QueryLogParams(org.apache.pinot.spi.trace.RequestContext, java.lang.String, org.apache.pinot.common.response.BrokerResponse, org.apache.pinot.broker.querylog.QueryLogger$QueryLogParams$QueryEngine, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.broker.requesthandler.BaseSingleStageBrokerRequestHandler$ServerStats)
	+++  NEW CONSTRUCTOR: PUBLIC(+) QueryLogger$QueryLogParams(org.apache.pinot.spi.trace.RequestContext, java.lang.String, org.apache.pinot.common.response.BrokerResponse, org.apache.pinot.broker.querylog.QueryLogger$QueryLogParams$QueryEngine, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.broker.requesthandler.BaseSingleStageBrokerRequestHandler$ServerStats)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.broker.queryquota.QueryQuotaManager
	+++  NEW METHOD: PUBLIC(+) boolean acquireLogicalTable(java.lang.String)
	+++  NEW METHOD: PRIVATE(+) java.lang.String constructLogicalTableConfigPath(java.lang.String)
	---  REMOVED METHOD: PRIVATE(-) void createOrUpdateRateLimiter(java.lang.String, org.apache.helix.model.ExternalView, org.apache.pinot.spi.config.table.QuotaConfig)
	+++  NEW METHOD: PRIVATE(+) void createOrUpdateRateLimiter(java.lang.String, org.apache.helix.model.ExternalView, org.apache.pinot.spi.config.table.QuotaConfig, org.apache.zookeeper.data.Stat)
	+++  NEW METHOD: PUBLIC(+) void initOrUpdateLogicalTableQueryQuota(java.lang.String)
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.broker.queryquota.QueryQuotaManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean acquireLogicalTable(java.lang.String)
***! MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.broker.requesthandler.BaseBrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	---! REMOVED METHOD: PROTECTED(-) ABSTRACT(-) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
	+++* NEW METHOD: PROTECTED(+) ABSTRACT(+) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.spi.auth.TableAuthorizationResult hasTableAccess(org.apache.pinot.broker.api.RequesterIdentity, java.util.Set<java.lang.String>, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.spi.auth.TableAuthorizationResult hasTableAccess(org.apache.pinot.spi.auth.broker.RequesterIdentity, java.util.Set<java.lang.String>, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
***! MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.broker.requesthandler.BaseSingleStageBrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
	---  REMOVED METHOD: PRIVATE(-) org.apache.pinot.broker.requesthandler.BaseSingleStageBrokerRequestHandler$CompileResult compileRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.broker.requesthandler.BaseSingleStageBrokerRequestHandler$CompileResult compileRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.common.response.BrokerResponse doHandleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.common.response.BrokerResponse doHandleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) org.apache.pinot.common.response.broker.BrokerResponseNative getEmptyBrokerOnlyResponse(org.apache.pinot.common.request.PinotQuery, org.apache.pinot.common.request.PinotQuery, org.apache.pinot.spi.trace.RequestContext, java.lang.String, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.data.Schema, java.lang.String, java.lang.String)
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.common.response.broker.BrokerResponseNative getEmptyBrokerOnlyResponse(org.apache.pinot.common.request.PinotQuery, org.apache.pinot.common.request.PinotQuery, org.apache.pinot.spi.trace.RequestContext, java.lang.String, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.data.Schema, java.lang.String, java.lang.String)
	---  REMOVED METHOD: PROTECTED(-) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void handleSubquery(org.apache.pinot.common.request.PinotQuery, long, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void handleSubquery(org.apache.pinot.common.request.Expression, long, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void handleSubquery(org.apache.pinot.common.request.PinotQuery, long, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void handleSubquery(org.apache.pinot.common.request.Expression, long, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.broker.requesthandler.BrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.requesthandler.BrokerRequestHandlerDelegate  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.response.BrokerResponse handleRequest(com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.broker.requesthandler.GrpcBrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
***! MODIFIED CLASS: PUBLIC org.apache.pinot.broker.requesthandler.MultiStageBrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
	---  REMOVED METHOD: PRIVATE(-) void checkAuthorization(org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.query.QueryEnvironment$CompiledQuery)
	+++  NEW METHOD: PRIVATE(+) void checkAuthorization(org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.query.QueryEnvironment$CompiledQuery)
	---  REMOVED METHOD: PROTECTED(-) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.common.response.BrokerResponse handleRequestThrowing(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: org.apache.pinot.spi.exception.QueryException
		---  REMOVED EXCEPTION: javax.ws.rs.WebApplicationException
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.common.response.BrokerResponse handleRequestThrowing(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: org.apache.pinot.spi.exception.QueryException
		+++  NEW EXCEPTION: javax.ws.rs.WebApplicationException
	---  REMOVED METHOD: PRIVATE(-) org.apache.pinot.common.response.BrokerResponse query(org.apache.pinot.query.QueryEnvironment$CompiledQuery, long, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.common.utils.Timer)
		---  REMOVED EXCEPTION: org.apache.pinot.spi.exception.QueryException
		---  REMOVED EXCEPTION: javax.ws.rs.WebApplicationException
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.common.response.BrokerResponse query(org.apache.pinot.query.QueryEnvironment$CompiledQuery, long, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.common.utils.Timer)
		+++  NEW EXCEPTION: org.apache.pinot.spi.exception.QueryException
		+++  NEW EXCEPTION: javax.ws.rs.WebApplicationException
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.broker.requesthandler.SingleConnectionBrokerRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
***! MODIFIED CLASS: PUBLIC org.apache.pinot.broker.requesthandler.TimeSeriesRequestHandler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.broker.requesthandler.BrokerRequestHandler
	---  REMOVED METHOD: PROTECTED(-) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.broker.api.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.common.response.BrokerResponse handleRequest(long, java.lang.String, org.apache.pinot.sql.parsers.SqlNodeAndOptions, com.fasterxml.jackson.databind.JsonNode, org.apache.pinot.spi.auth.broker.RequesterIdentity, org.apache.pinot.spi.trace.RequestContext, javax.ws.rs.core.HttpHeaders, org.apache.pinot.broker.api.AccessControl)
		+++  NEW EXCEPTION: java.lang.Exception
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.routing.BrokerRoutingManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) void buildRoutingForLogicalTable(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo getTablePartitionReplicatedServersInfo(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void removeRoutingForLogicalTable(java.lang.String)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.routing.instanceselector.MultiStageReplicaGroupSelector  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) org.apache.commons.lang3.tuple.Pair<java.util.Map<java.lang.String,java.lang.String>,java.util.Map<java.lang.String,java.lang.String>> assign(java.util.Set<java.lang.String>, org.apache.pinot.broker.routing.instanceselector.SegmentStates, org.apache.pinot.common.assignment.InstancePartitions, int)
	---  REMOVED METHOD: PRIVATE(-) org.apache.commons.lang3.tuple.Pair<java.util.Map<java.lang.String,java.lang.String>,java.util.Map<java.lang.String,java.lang.String>> computeOptionalSegments(java.util.Map<java.lang.String,java.lang.String>, org.apache.pinot.broker.routing.instanceselector.SegmentStates)
	---  REMOVED METHOD: PRIVATE(-) void getSelectedInstancesForPartition(java.util.Map<java.lang.String,java.util.Set<java.lang.String>>, java.util.Set<java.lang.String>, int, int, java.util.Map<java.lang.String,java.lang.String>)
	+++  NEW METHOD: PRIVATE(+) org.apache.commons.lang3.tuple.Pair<java.util.Map<java.lang.String,java.lang.String>,java.util.Map<java.lang.String,java.lang.String>> tryAssigning(java.util.List<java.lang.String>, org.apache.pinot.broker.routing.instanceselector.SegmentStates, org.apache.pinot.common.assignment.InstancePartitions, int)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.broker.routing.segmentpartition.SegmentPartitionMetadataManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) TRANSIENT(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo _tablePartitionReplicatedServersInfo
	+++  NEW METHOD: PRIVATE(+) void computeAllTablePartitionInfo()
	+++  NEW METHOD: PRIVATE(+) void computeTablePartitionReplicatedServersInfo()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo getTablePartitionReplicatedServersInfo()

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-clp-log-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-clp-log-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-common-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-common-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***! MODIFIED CLASS: PUBLIC org.apache.pinot.common.assignment.InstancePartitions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<java.lang.String,java.lang.Integer> getInstanceToPartitionIdMap()
	---  REMOVED METHOD: PRIVATE(-) org.apache.commons.lang3.tuple.Pair<java.lang.Integer,java.lang.Integer> getPartitionIdAndReplicaGroupId(java.lang.String)
***  MODIFIED ENUM: PUBLIC STATIC FINAL org.apache.pinot.common.datatable.DataTable$MetadataKey  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.datatable.DataTable$MetadataKey THREAD_MEM_ALLOCATED_BYTES
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.datatable.DataTable$MetadataKey RESPONSE_SER_MEM_ALLOCATED_BYTES
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.function.scalar.DateTimeFunctions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) long fromIso8601(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) long[] fromIso8601MV(java.lang.String[])
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toIso8601(long)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String[] toIso8601MV(long[])
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.common.messages.LogicalTableConfigRefreshMessage  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String REFRESH_LOGICAL_TABLE_CONFIG_MSG_SUB_TYPE
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) java.lang.String TABLE_NAME_KEY
	+++  NEW CONSTRUCTOR: PUBLIC(+) LogicalTableConfigRefreshMessage(org.apache.helix.model.Message)
	+++  NEW CONSTRUCTOR: PUBLIC(+) LogicalTableConfigRefreshMessage(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getLogicalTableName()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.metadata.ZKMetadataProvider  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean isTableConfigExists(org.apache.helix.store.zk.ZkHelixPropertyStore<org.apache.helix.zookeeper.datamodel.ZNRecord>, java.lang.String)
***  MODIFIED ENUM: PUBLIC FINAL org.apache.pinot.common.metrics.ServerMeter  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.metrics.ServerMeter TOTAL_MEM_ALLOCATED_BYTES
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.metrics.ServerMeter THREAD_MEM_ALLOCATED_BYTES
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.metrics.ServerMeter RESPONSE_SER_MEM_ALLOCATED_BYTES
***  MODIFIED CLASS: PUBLIC STATIC FINAL org.apache.pinot.common.proto.Plan$JoinNode  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.common.proto.Plan$JoinNodeOrBuilder
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) int MATCHCONDITION_FIELD_NUMBER
	+++  NEW FIELD: PRIVATE(+) int bitField0_
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.common.proto.Expressions$Expression matchCondition_
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Expressions$Expression getMatchCondition()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Expressions$ExpressionOrBuilder getMatchConditionOrBuilder()
	+++  NEW METHOD: PUBLIC(+) boolean hasMatchCondition()
***  MODIFIED CLASS: PUBLIC STATIC FINAL org.apache.pinot.common.proto.Plan$JoinNode$Builder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.common.proto.Plan$JoinNodeOrBuilder
	+++  NEW FIELD: PRIVATE(+) com.google.protobuf.SingleFieldBuilderV3<org.apache.pinot.common.proto.Expressions$Expression,org.apache.pinot.common.proto.Expressions$Expression$Builder,org.apache.pinot.common.proto.Expressions$ExpressionOrBuilder> matchConditionBuilder_
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.common.proto.Expressions$Expression matchCondition_
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Plan$JoinNode$Builder clearMatchCondition()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Expressions$Expression getMatchCondition()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Expressions$Expression$Builder getMatchConditionBuilder()
	+++  NEW METHOD: PRIVATE(+) com.google.protobuf.SingleFieldBuilderV3<org.apache.pinot.common.proto.Expressions$Expression,org.apache.pinot.common.proto.Expressions$Expression$Builder,org.apache.pinot.common.proto.Expressions$ExpressionOrBuilder> getMatchConditionFieldBuilder()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Expressions$ExpressionOrBuilder getMatchConditionOrBuilder()
	+++  NEW METHOD: PUBLIC(+) boolean hasMatchCondition()
	+++  NEW METHOD: PRIVATE(+) void maybeForceBuilderInitialization()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Plan$JoinNode$Builder mergeMatchCondition(org.apache.pinot.common.proto.Expressions$Expression)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Plan$JoinNode$Builder setMatchCondition(org.apache.pinot.common.proto.Expressions$Expression)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.common.proto.Plan$JoinNode$Builder setMatchCondition(org.apache.pinot.common.proto.Expressions$Expression$Builder)
**** MODIFIED INTERFACE: PUBLIC ABSTRACT STATIC org.apache.pinot.common.proto.Plan$JoinNodeOrBuilder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.common.proto.Expressions$Expression getMatchCondition()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.common.proto.Expressions$ExpressionOrBuilder getMatchConditionOrBuilder()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean hasMatchCondition()
***  MODIFIED ENUM: PUBLIC STATIC FINAL org.apache.pinot.common.proto.Plan$JoinStrategy  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) int AS_OF_VALUE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.proto.Plan$JoinStrategy AS_OF
***  MODIFIED ENUM: PUBLIC STATIC FINAL org.apache.pinot.common.proto.Plan$JoinType  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) int ASOF_VALUE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.proto.Plan$JoinType LEFT_ASOF
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) int LEFT_ASOF_VALUE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.common.proto.Plan$JoinType ASOF
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.response.broker.BrokerResponseNative  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.common.response.BrokerResponse
	+++  NEW FIELD: PRIVATE(+) long _realtimeThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineResponseSerMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeResponseSerMemAllocatedBytes
	+++  NEW METHOD: PUBLIC(+) long getOfflineResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getOfflineThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) void setOfflineResponseSerMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setOfflineThreadMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setRealtimeResponseSerMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setRealtimeThreadMemAllocatedBytes(long)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.response.broker.BrokerResponseNativeV2  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.common.response.BrokerResponse
	+++  NEW METHOD: PUBLIC(+) long getOfflineResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getOfflineThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeThreadMemAllocatedBytes()
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.common.response.BrokerResponse  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getOfflineResponseSerMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getOfflineThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getOfflineTotalMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getRealtimeResponseSerMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getRealtimeThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeTotalMemAllocatedBytes()
***! MODIFIED CLASS: PUBLIC org.apache.pinot.common.tier.FixedTierSegmentSelector  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.common.tier.TierSegmentSelector
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.helix.HelixManager _helixManager
	---! REMOVED CONSTRUCTOR: PUBLIC(-) FixedTierSegmentSelector(org.apache.helix.HelixManager, java.util.Set<java.lang.String>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) FixedTierSegmentSelector(java.util.Set<java.lang.String>)
	---  REMOVED METHOD: PUBLIC(-) boolean selectSegment(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean selectSegment(java.lang.String, org.apache.pinot.common.metadata.segment.SegmentZKMetadata)
***! MODIFIED CLASS: PUBLIC FINAL org.apache.pinot.common.tier.TierFactory  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) org.apache.pinot.common.tier.Tier getTier(org.apache.pinot.spi.config.table.TierConfig, org.apache.helix.HelixManager)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) org.apache.pinot.common.tier.Tier getTier(org.apache.pinot.spi.config.table.TierConfig, org.apache.helix.HelixManager, java.util.Set<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.common.tier.Tier getTier(org.apache.pinot.spi.config.table.TierConfig)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.common.tier.Tier getTier(org.apache.pinot.spi.config.table.TierConfig, java.util.Set<java.lang.String>)
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.common.tier.TierSegmentSelector  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean selectSegment(java.lang.String, java.lang.String)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean selectSegment(java.lang.String, org.apache.pinot.common.metadata.segment.SegmentZKMetadata)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.common.tier.TimeBasedTierSegmentSelector  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.common.tier.TierSegmentSelector
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.helix.HelixManager _helixManager
	---! REMOVED CONSTRUCTOR: PUBLIC(-) TimeBasedTierSegmentSelector(org.apache.helix.HelixManager, java.lang.String)
	+++  NEW CONSTRUCTOR: PUBLIC(+) TimeBasedTierSegmentSelector(java.lang.String)
	---  REMOVED METHOD: PUBLIC(-) boolean selectSegment(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean selectSegment(java.lang.String, org.apache.pinot.common.metadata.segment.SegmentZKMetadata)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.utils.config.QueryOptionsUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean isAccurateGroupByWithoutOrderBy(java.util.Map<java.lang.String,java.lang.String>)
***! MODIFIED CLASS: PUBLIC FINAL org.apache.pinot.common.utils.config.TierConfigUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiers(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, org.apache.helix.HelixManager)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiers(java.util.List<org.apache.pinot.spi.config.table.TierConfig>)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiersForStorageType(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, java.lang.String, org.apache.helix.HelixManager)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiersForStorageType(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, java.lang.String, org.apache.helix.HelixManager, java.util.Map<java.lang.String,java.util.Set<java.lang.String>>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiersForStorageType(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiersForStorageType(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, java.lang.String, java.util.Map<java.lang.String,java.util.Set<java.lang.String>>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.common.tier.Tier getTier(java.util.List<org.apache.pinot.spi.config.table.TierConfig>, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.common.assignment.InstancePartitions getTieredInstancePartitions(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.tier.Tier, org.apache.helix.HelixManager)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) org.apache.pinot.common.assignment.InstancePartitions getTieredInstancePartitionsForSegment(org.apache.pinot.spi.config.table.TableConfig, java.lang.String, java.util.List<org.apache.pinot.common.tier.Tier>, org.apache.helix.HelixManager)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.common.assignment.InstancePartitions getTieredInstancePartitionsForSegment(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.metadata.segment.SegmentZKMetadata, java.util.List<org.apache.pinot.common.tier.Tier>, org.apache.helix.HelixManager)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.common.utils.ExceptionUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String consolidateExceptionTraces(java.lang.Throwable)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.sql.parsers.parser.SqlParserImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PRIVATE(+) boolean jj_2_1775(int)
	+++  NEW METHOD: PRIVATE(+) boolean jj_3_1775()

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-compatibility-verifier-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-compatibility-verifier-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-compound-metrics-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-compound-metrics-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-confluent-avro-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-confluent-avro-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-confluent-json-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-confluent-json-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-confluent-protobuf-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-confluent-protobuf-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-controller-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-controller-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***  MODIFIED CLASS: PUBLIC org.apache.pinot.controller.api.resources.PinotQueryResource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) java.util.Set<java.lang.String> getBrokerTenantsUnion(java.util.List<org.apache.pinot.spi.config.table.TableConfig>)
	+++  NEW METHOD: PRIVATE(+) java.util.Set<java.lang.String> getBrokerTenantsUnion(java.util.List<org.apache.pinot.spi.config.table.TableConfig>, java.util.List<org.apache.pinot.spi.data.LogicalTableConfig>)
	+++  NEW METHOD: PRIVATE(+) java.util.List<org.apache.pinot.spi.data.LogicalTableConfig> getListLogicalTableConfigs(java.util.List<java.lang.String>, java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.api.resources.TableSize  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.controller.util.TableSizeReader$TableSizeDetails getTableSize(java.lang.String, boolean, javax.ws.rs.core.HttpHeaders)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.controller.util.TableSizeReader$TableSizeDetails getTableSize(java.lang.String, boolean, boolean, javax.ws.rs.core.HttpHeaders)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.api.resources.TableViews  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getSegmentsStatusDetails(java.lang.String, java.lang.String, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: com.fasterxml.jackson.core.JsonProcessingException
	+++  NEW METHOD: PUBLIC(+) java.lang.String getSegmentsStatusDetails(java.lang.String, java.lang.String, boolean, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: com.fasterxml.jackson.core.JsonProcessingException
	---! REMOVED METHOD: PUBLIC(-) java.util.List<org.apache.pinot.controller.api.resources.SegmentStatusInfo> getSegmentStatuses(org.apache.pinot.controller.api.resources.TableViews$TableView, org.apache.pinot.controller.api.resources.TableViews$TableView)
	+++  NEW METHOD: PUBLIC(+) java.util.List<org.apache.pinot.controller.api.resources.SegmentStatusInfo> getSegmentStatuses(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)
	***  MODIFIED METHOD: PUBLIC (<- PRIVATE) java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>><java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getStateMap(org.apache.pinot.controller.api.resources.TableViews$TableView)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.api.upload.ZKOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) void completeSegmentOperations(java.lang.String, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, boolean, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PUBLIC(+) void completeSegmentOperations(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, boolean, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
	---! REMOVED METHOD: PUBLIC(-) void completeSegmentsOperations(java.lang.String, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PUBLIC(+) void completeSegmentsOperations(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		+++  NEW EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void copyNewSegmentToDeepStoreIfNeeded(java.lang.String, java.lang.String, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, java.io.File, java.lang.String, java.net.URI, boolean, long)
		+++  NEW EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.common.metadata.segment.SegmentZKMetadata createNewSegmentZKMetadata(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.segment.spi.SegmentMetadata, java.lang.String, java.lang.String, long, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.common.tier.Tier>, boolean, long)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void deleteSegmentsIfNeeded(java.lang.String, java.util.List<java.lang.String>, long, boolean)
	+++  NEW METHOD: PRIVATE(+) void deleteSegmentsIfNeeded(java.lang.String, java.util.Collection<java.lang.String>, long, boolean)
	---  REMOVED METHOD: PRIVATE(-) void processExistingSegment(java.lang.String, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, org.apache.helix.zookeeper.datamodel.ZNRecord, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void processExistingSegment(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, org.apache.helix.zookeeper.datamodel.ZNRecord, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void processExistingSegments(java.lang.String, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void processExistingSegments(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void processNewSegment(java.lang.String, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, javax.ws.rs.core.HttpHeaders)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void processNewSegment(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.segment.spi.SegmentMetadata, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, java.net.URI, java.io.File, java.lang.String, java.lang.String, java.lang.String, long, boolean, javax.ws.rs.core.HttpHeaders)
		+++  NEW EXCEPTION: java.lang.Exception
	---  REMOVED METHOD: PRIVATE(-) void processNewSegments(java.lang.String, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		---  REMOVED EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void processNewSegments(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.utils.FileUploadDownloadClient$FileUploadType, boolean, javax.ws.rs.core.HttpHeaders, java.util.List<org.apache.pinot.controller.api.upload.SegmentUploadMetadata>)
		+++  NEW EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PRIVATE(+) void releaseParallelPushLock(java.lang.String, org.apache.pinot.common.metadata.segment.SegmentZKMetadata, long)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.helix.ControllerRequestClient  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) void addLogicalTableConfig(org.apache.pinot.spi.data.LogicalTableConfig)
		+++  NEW EXCEPTION: java.io.IOException
	***! MODIFIED METHOD: PUBLIC java.lang.String (<-void) reloadSegment(java.lang.String, java.lang.String, boolean)
		===  UNCHANGED EXCEPTION: java.io.IOException
	+++  NEW METHOD: PUBLIC(+) void updateLogicalTableConfig(org.apache.pinot.spi.data.LogicalTableConfig)
		+++  NEW EXCEPTION: java.io.IOException
***! MODIFIED CLASS: STATIC org.apache.pinot.controller.helix.core.assignment.segment.SegmentAssignmentUtils$TierSegmentAssignment  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED CONSTRUCTOR: SegmentAssignmentUtils$TierSegmentAssignment(java.lang.String, java.util.List<org.apache.pinot.common.tier.Tier>, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)
	+++  NEW CONSTRUCTOR: SegmentAssignmentUtils$TierSegmentAssignment(org.apache.helix.HelixManager, java.lang.String, java.util.List<org.apache.pinot.common.tier.Tier>, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.helix.core.PinotHelixResourceManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) void assignSegment(org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.common.metadata.segment.SegmentZKMetadata)
	+++  NEW METHOD: PUBLIC(+) void assignSegments(org.apache.pinot.spi.config.table.TableConfig, java.util.Map<java.lang.String,org.apache.pinot.common.metadata.segment.SegmentZKMetadata>)
	---! REMOVED METHOD: PUBLIC(-) void assignTableSegment(java.lang.String, java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) void assignTableSegments(java.lang.String, java.util.List<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getActualLogicalTableName(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.util.List<java.lang.String> getAllLogicalTableNames(java.lang.String)
	+++  NEW METHOD: PRIVATE(+) java.util.Map<org.apache.pinot.spi.config.table.assignment.InstancePartitionsType,org.apache.pinot.common.assignment.InstancePartitions> getInstacePartitionsMap(org.apache.pinot.spi.config.table.TableConfig, java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<java.lang.String,java.util.List<java.lang.String>> getServerToSegmentsMap(java.lang.String, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.String,java.util.List<java.lang.String>> getServerToSegmentsMap(java.lang.String, java.lang.String, boolean)
	+++  NEW METHOD: PUBLIC(+) java.util.List<org.apache.pinot.common.tier.Tier> getSortedTiers(org.apache.pinot.spi.config.table.TableConfig)
	+++  NEW METHOD: PUBLIC(+) boolean needTieredSegmentAssignment(org.apache.pinot.spi.config.table.TableConfig)
	+++  NEW METHOD: PRIVATE(+) void sendLogicalTableConfigRefreshMessage(java.lang.String)
	---  REMOVED METHOD: PRIVATE(-) java.lang.String updateSegmentTargetTier(java.lang.String, java.lang.String, java.util.List<org.apache.pinot.common.tier.Tier>)
	+++  NEW METHOD: PUBLIC(+) boolean updateSegmentTargetTier(java.lang.String, org.apache.pinot.common.metadata.segment.SegmentZKMetadata, java.util.List<org.apache.pinot.common.tier.Tier>)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.controller.helix.core.rebalance.TableRebalancer  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PRIVATE(+) STATIC(+) java.util.Map<org.apache.commons.lang3.tuple.Pair<java.util.Set<java.lang.String>,java.util.Set<java.lang.String>>,java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>>> getCurrentAndTargetInstancesToPartitionIdToCurrentAssignmentMap(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>, it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<java.lang.String>, org.apache.pinot.controller.helix.core.rebalance.TableRebalancer$PartitionIdFetcher)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) java.util.Map<java.lang.Integer,java.util.Map<java.util.Set<java.lang.String>,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>>> getPartitionIdToAssignedInstancesToCurrentAssignmentMap(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>, it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<java.lang.String>, org.apache.pinot.controller.helix.core.rebalance.TableRebalancer$PartitionIdFetcher)
***! MODIFIED INTERFACE: ABSTRACT STATIC org.apache.pinot.controller.helix.core.rebalance.TableRebalancer$PartitionIdFetcher  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) int fetch(java.lang.String)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) int fetch(java.lang.String, boolean)
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.controller.helix.core.rebalance.TableRebalancer$PartitionIdFetcherImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.controller.helix.core.rebalance.TableRebalancer$PartitionIdFetcher
	---  REMOVED METHOD: PUBLIC(-) int fetch(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) int fetch(java.lang.String, boolean)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.controller.util.TableSizeReader  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.controller.util.TableSizeReader$TableSizeDetails getTableSizeDetails(java.lang.String, int)
		---  REMOVED EXCEPTION: org.apache.pinot.common.exception.InvalidConfigException
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.controller.util.TableSizeReader$TableSizeDetails getTableSizeDetails(java.lang.String, int, boolean)
		+++  NEW EXCEPTION: org.apache.pinot.common.exception.InvalidConfigException
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.controller.util.TableSizeReader$TableSubTypeSizeDetails getTableSubtypeSize(java.lang.String, int)
		---  REMOVED EXCEPTION: org.apache.pinot.common.exception.InvalidConfigException
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.controller.util.TableSizeReader$TableSubTypeSizeDetails getTableSubtypeSize(java.lang.String, int, boolean)
		+++  NEW EXCEPTION: org.apache.pinot.common.exception.InvalidConfigException

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-core-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-core-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.core.data.manager.InstanceDataManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.core.data.manager.LogicalTableContext getLogicalTableContext(java.lang.String)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.core.data.manager.LogicalTableContext  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.spi.config.table.TableConfig _refOfflineTableConfig
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.spi.data.Schema _logicalTableSchema
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.spi.data.LogicalTableConfig _logicalTableConfig
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.spi.config.table.TableConfig _refRealtimeTableConfig
	+++  NEW CONSTRUCTOR: PUBLIC(+) LogicalTableContext(org.apache.pinot.spi.data.LogicalTableConfig, org.apache.pinot.spi.data.Schema, org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.spi.config.table.TableConfig)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.LogicalTableConfig getLogicalTableConfig()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.Schema getLogicalTableSchema()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.config.table.TableConfig getRefOfflineTableConfig()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.config.table.TableConfig getRefRealtimeTableConfig()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.core.data.table.DeterministicConcurrentIndexedTable  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: org.apache.pinot.core.data.table.Table
	+++  NEW SUPERCLASS: org.apache.pinot.core.data.table.IndexedTable
	+++  NEW CONSTRUCTOR: PUBLIC(+) DeterministicConcurrentIndexedTable(org.apache.pinot.common.utils.DataSchema, boolean, org.apache.pinot.core.query.request.context.QueryContext, int, int, int, int, java.util.concurrent.ExecutorService)
	+++  NEW METHOD: PUBLIC(+) boolean upsert(org.apache.pinot.core.data.table.Key, org.apache.pinot.core.data.table.Record)
	+++  NEW METHOD: PROTECTED(+) void upsertWithoutOrderBy(org.apache.pinot.core.data.table.Key, org.apache.pinot.core.data.table.Record)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.data.table.Key  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW METHOD: PUBLIC(+) int compareTo(org.apache.pinot.core.data.table.Key)
***  MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.core.operator.blocks.results.BaseResultsBlock  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) long _executionThreadMemAllocatedBytes
	+++  NEW METHOD: PUBLIC(+) long getExecutionThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) void setExecutionThreadMemAllocatedBytes(long)
***  MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.core.operator.combine.BaseCombineOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	GENERIC TEMPLATES: === T:org.apache.pinot.core.operator.blocks.results.BaseResultsBlock
	+++  NEW FIELD: PROTECTED(+) FINAL(+) java.util.concurrent.atomic.AtomicLong _totalWorkerThreadMemAllocatedBytes
***! MODIFIED CLASS: PUBLIC org.apache.pinot.core.operator.combine.CombineOperatorUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) void setExecutionStatistics(org.apache.pinot.core.operator.blocks.results.BaseResultsBlock, java.util.List<org.apache.pinot.core.common.Operator>, long, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void setExecutionStatistics(org.apache.pinot.core.operator.blocks.results.BaseResultsBlock, java.util.List<org.apache.pinot.core.common.Operator>, long, int, long)
***! MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.core.operator.combine.MinMaxValueBasedSelectionOrderByCombineOperator$MinMaxValueContext  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED CONSTRUCTOR: MinMaxValueBasedSelectionOrderByCombineOperator$MinMaxValueContext(org.apache.pinot.core.common.Operator<org.apache.pinot.core.operator.blocks.results.BaseResultsBlock>, java.lang.String)
	+++  NEW CONSTRUCTOR: MinMaxValueBasedSelectionOrderByCombineOperator$MinMaxValueContext(org.apache.pinot.core.common.Operator<org.apache.pinot.core.operator.blocks.results.BaseResultsBlock>, java.lang.String, org.apache.pinot.spi.data.Schema)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.operator.filter.JsonMatchFilterOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.common.request.context.FilterContext _filterContext
	+++  NEW CONSTRUCTOR: PUBLIC(+) JsonMatchFilterOperator(org.apache.pinot.segment.spi.index.reader.JsonIndexReader, org.apache.pinot.common.request.context.FilterContext, int)
	+++  NEW METHOD: PRIVATE(+) org.roaringbitmap.buffer.ImmutableRoaringBitmap getMatchingDocIdBitmap()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.core.operator.filter.MapFilterOperator  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: org.apache.pinot.core.common.Operator
	+++  NEW SUPERCLASS: org.apache.pinot.core.operator.filter.BaseFilterOperator
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.core.operator.filter.JsonMatchFilterOperator _jsonMatchOperator
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.core.operator.filter.ExpressionFilterOperator _expressionFilterOperator
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _keyName
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) java.lang.String EXPLAIN_NAME
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _columnName
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.common.request.context.predicate.Predicate _predicate
	+++  NEW CONSTRUCTOR: PUBLIC(+) MapFilterOperator(org.apache.pinot.segment.spi.IndexSegment, org.apache.pinot.common.request.context.predicate.Predicate, org.apache.pinot.core.query.request.context.QueryContext, int)
	+++  NEW METHOD: PUBLIC(+) boolean canOptimizeCount()
	+++  NEW METHOD: PUBLIC(+) boolean canProduceBitmaps()
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.common.request.context.FilterContext createFilterContext()
	+++  NEW METHOD: PROTECTED(+) void explainAttributes(org.apache.pinot.core.operator.ExplainAttributeBuilder)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.operator.filter.BitmapCollection getBitmaps()
	+++  NEW METHOD: PUBLIC(+) java.util.List<org.apache.pinot.core.common.Operator> getChildOperators()
	+++  NEW METHOD: PROTECTED(+) java.lang.String getExplainName()
	+++  NEW METHOD: PUBLIC(+) int getNumMatchingDocs()
	+++  NEW METHOD: PROTECTED(+) org.apache.pinot.core.common.BlockDocIdSet getTrues()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toExplainString()
	+++  NEW METHOD: PRIVATE(+) boolean useJsonIndex(org.apache.pinot.common.request.context.predicate.Predicate$Type)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.operator.InstanceResponseOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PROTECTED(+) long _threadMemAllocatedBytes
	+++  NEW METHOD: PRIVATE(+) void calculateResourceUsage(int, long, long, long, long, long)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.plan.AggregationPlanNode  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) boolean isFitForNonScanBasedPlan(org.apache.pinot.core.query.aggregation.function.AggregationFunction[], org.apache.pinot.segment.spi.IndexSegment)
	+++  NEW METHOD: PRIVATE(+) boolean isFitForNonScanBasedPlan()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.plan.FilterPlanNode  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PRIVATE(+) boolean canApplyMapFilter(org.apache.pinot.common.request.context.predicate.Predicate)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.query.executor.LogicalTableExecutionInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.core.query.executor.TableExecutionInfo
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.Schema getSchema()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.query.executor.SingleTableExecutionInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.core.query.executor.TableExecutionInfo
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.Schema getSchema()
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.core.query.executor.TableExecutionInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.spi.data.Schema getSchema()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.query.reduce.ExecutionStatsAggregator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) long _realtimeThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineResponseSerMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeResponseSerMemAllocatedBytes
***  MODIFIED CLASS: PUBLIC org.apache.pinot.core.query.request.context.QueryContext  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.spi.data.Schema _schema
	+++  NEW FIELD: PRIVATE(+) boolean _accurateGroupByWithoutOrderBy
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.Schema getSchema()
	+++  NEW METHOD: PUBLIC(+) boolean isAccurateGroupByWithoutOrderBy()
	+++  NEW METHOD: PUBLIC(+) void setAccurateGroupByWithoutOrderBy(boolean)
	+++  NEW METHOD: PUBLIC(+) void setSchema(org.apache.pinot.spi.data.Schema)
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.core.routing.RoutingManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo getTablePartitionReplicatedServersInfo(java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.core.routing.TablePartitionInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.core.routing.TablePartitionInfo$PartitionInfo[] _partitionInfoMap
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.List<java.util.List<java.lang.String>> _segmentsByPartition
	---! REMOVED CONSTRUCTOR: PUBLIC(-) TablePartitionInfo(java.lang.String, java.lang.String, java.lang.String, int, org.apache.pinot.core.routing.TablePartitionInfo$PartitionInfo[], java.util.List<java.lang.String>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) TablePartitionInfo(java.lang.String, java.lang.String, java.lang.String, int, java.util.List<java.util.List<java.lang.String>>, java.util.List<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.core.routing.TablePartitionInfo$PartitionInfo[] getPartitionInfoMap()
	+++  NEW METHOD: PUBLIC(+) java.util.List<java.util.List<java.lang.String>> getSegmentsByPartition()
---! REMOVED CLASS: PUBLIC(-) STATIC(-) org.apache.pinot.core.routing.TablePartitionInfo$PartitionInfo  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED FIELD: PUBLIC(-) FINAL(-) java.util.Set<java.lang.String> _fullyReplicatedServers
	---! REMOVED FIELD: PUBLIC(-) FINAL(-) java.util.List<java.lang.String> _segments
	---! REMOVED CONSTRUCTOR: PUBLIC(-) TablePartitionInfo$PartitionInfo(java.util.Set<java.lang.String>, java.util.List<java.lang.String>)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) FINAL(+) int _numPartitions
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.List<java.lang.String> _segmentsWithInvalidPartition
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _partitionFunctionName
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _partitionColumn
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo$PartitionInfo[] _partitionInfoMap
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _tableNameWithType
	+++  NEW CONSTRUCTOR: PUBLIC(+) TablePartitionReplicatedServersInfo(java.lang.String, java.lang.String, java.lang.String, int, org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo$PartitionInfo[], java.util.List<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) int getNumPartitions()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getPartitionColumn()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getPartitionFunctionName()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo$PartitionInfo[] getPartitionInfoMap()
	+++  NEW METHOD: PUBLIC(+) java.util.List<java.lang.String> getSegmentsWithInvalidPartition()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getTableNameWithType()
+++  NEW CLASS: PUBLIC(+) STATIC(+) org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo$PartitionInfo  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PUBLIC(+) FINAL(+) java.util.Set<java.lang.String> _fullyReplicatedServers
	+++  NEW FIELD: PUBLIC(+) FINAL(+) java.util.List<java.lang.String> _segments
	+++  NEW CONSTRUCTOR: PUBLIC(+) TablePartitionReplicatedServersInfo$PartitionInfo(java.util.Set<java.lang.String>, java.util.List<java.lang.String>)
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.server.access.AccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean hasDataAccess(org.apache.pinot.server.access.RequesterIdentity, java.lang.String)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean hasDataAccess(org.apache.pinot.spi.auth.server.RequesterIdentity, java.lang.String)
***  MODIFIED CLASS: org.apache.pinot.server.access.AllowAllAccessFactory$1  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.server.access.AccessControl
	---  REMOVED METHOD: PUBLIC(-) boolean hasDataAccess(org.apache.pinot.server.access.RequesterIdentity, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean hasDataAccess(org.apache.pinot.spi.auth.server.RequesterIdentity, java.lang.String)
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.server.access.BasicAuthAccessFactory$BasicAuthAccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.server.access.AccessControl
	---  REMOVED METHOD: PRIVATE(-) java.util.Collection<java.lang.String> getTokens(org.apache.pinot.server.access.RequesterIdentity)
	+++  NEW METHOD: PRIVATE(+) java.util.Collection<java.lang.String> getTokens(org.apache.pinot.spi.auth.server.RequesterIdentity)
	---  REMOVED METHOD: PUBLIC(-) boolean hasDataAccess(org.apache.pinot.server.access.RequesterIdentity, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean hasDataAccess(org.apache.pinot.spi.auth.server.RequesterIdentity, java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.server.access.GrpcRequesterIdentity  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED SUPERCLASS: org.apache.pinot.server.access.RequesterIdentity
***! MODIFIED CLASS: PUBLIC org.apache.pinot.server.access.HttpRequesterIdentity  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED SUPERCLASS: org.apache.pinot.server.access.RequesterIdentity
---! REMOVED CLASS: PUBLIC(-) ABSTRACT(-) org.apache.pinot.server.access.RequesterIdentity  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) RequesterIdentity()
***  MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.server.access.ZkBasicAuthAccessFactory$BasicAuthAccessControl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===! UNCHANGED INTERFACE: org.apache.pinot.server.access.AccessControl
	---  REMOVED METHOD: PRIVATE(-) java.util.Collection<java.lang.String> getTokens(org.apache.pinot.server.access.RequesterIdentity)
	+++  NEW METHOD: PRIVATE(+) java.util.Collection<java.lang.String> getTokens(org.apache.pinot.spi.auth.server.RequesterIdentity)
	---  REMOVED METHOD: PUBLIC(-) boolean hasDataAccess(org.apache.pinot.server.access.RequesterIdentity, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean hasDataAccess(org.apache.pinot.spi.auth.server.RequesterIdentity, java.lang.String)

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-csv-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-csv-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-dependency-verifier-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-dependency-verifier-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-distribution-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-distribution-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-dropwizard-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-dropwizard-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-flink-connector-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-flink-connector-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-gcs-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-gcs-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-hdfs-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-hdfs-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-integration-test-base-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-integration-test-base-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-integration-tests-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-integration-tests-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-java-client-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-java-client-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-jdbc-client-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-jdbc-client-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-json-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-json-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-kafka-2.0-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-kafka-2.0-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-kafka-3.0-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-kafka-3.0-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-kafka-base-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-kafka-base-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-kinesis-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-kinesis-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-minion-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-minion-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-minion-builtin-tasks-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-minion-builtin-tasks-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-orc-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-orc-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-parquet-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-parquet-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-perf-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-perf-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.perf.BenchmarkDeterministicIndexedTable  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) int NUM_RECORDS
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) int TRIM_THRESHOLD
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) java.util.Random RANDOM
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.core.query.request.context.QueryContext _queryContext
	+++  NEW FIELD: PRIVATE(+) java.util.concurrent.ExecutorService _executorService
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) int TRIM_SIZE
	+++  NEW FIELD: PRIVATE(+) java.util.List<java.lang.Integer> _d2
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.common.utils.DataSchema _dataSchema
	+++  NEW FIELD: PRIVATE(+) java.util.List<java.lang.String> _d1
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable()
	+++  NEW METHOD: PUBLIC(+) void concurrentIndexedTable()
		+++  NEW EXCEPTION: java.lang.InterruptedException
	+++  NEW METHOD: PUBLIC(+) void destroy()
	+++  NEW METHOD: PUBLIC(+) void deterministicIndexedTable()
		+++  NEW EXCEPTION: java.lang.InterruptedException
		+++  NEW EXCEPTION: java.util.concurrent.TimeoutException
		+++  NEW EXCEPTION: java.util.concurrent.ExecutionException
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.core.data.table.Record getNewRecord()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void main(java.lang.String[])
		+++  NEW EXCEPTION: java.lang.Exception
	+++  NEW METHOD: PUBLIC(+) void setup()
	+++  NEW METHOD: PUBLIC(+) void simpleIndexedTable()
		+++  NEW EXCEPTION: java.lang.InterruptedException
		+++  NEW EXCEPTION: java.util.concurrent.TimeoutException
		+++  NEW EXCEPTION: java.util.concurrent.ExecutionException
+++  NEW CLASS: org.apache.pinot.perf.BenchmarkDeterministicIndexedTable$1  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW CONSTRUCTOR: BenchmarkDeterministicIndexedTable$1(org.apache.pinot.perf.BenchmarkDeterministicIndexedTable, org.apache.pinot.core.data.table.IndexedTable, java.util.concurrent.CountDownLatch)
	+++  NEW METHOD: PUBLIC(+) void runJob()
+++  NEW CLASS: PUBLIC(+) FINAL(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_concurrentIndexedTable_jmhTest  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: byte p160
	+++  NEW FIELD: byte p043
	+++  NEW FIELD: byte p164
	+++  NEW FIELD: byte p042
	+++  NEW FIELD: byte p163
	+++  NEW FIELD: byte p041
	+++  NEW FIELD: byte p162
	+++  NEW FIELD: byte p040
	+++  NEW FIELD: byte p161
	+++  NEW FIELD: byte p036
	+++  NEW FIELD: byte p157
	+++  NEW FIELD: byte p035
	+++  NEW FIELD: byte p156
	+++  NEW FIELD: byte p034
	+++  NEW FIELD: byte p155
	+++  NEW FIELD: byte p033
	+++  NEW FIELD: byte p154
	+++  NEW FIELD: byte p039
	+++  NEW FIELD: byte p038
	+++  NEW FIELD: byte p159
	+++  NEW FIELD: byte p037
	+++  NEW FIELD: byte p158
	+++  NEW FIELD: byte p032
	+++  NEW FIELD: byte p153
	+++  NEW FIELD: byte p031
	+++  NEW FIELD: byte p152
	+++  NEW FIELD: byte p030
	+++  NEW FIELD: byte p151
	+++  NEW FIELD: byte p150
	+++  NEW FIELD: int startRndMask
	+++  NEW FIELD: byte p025
	+++  NEW FIELD: byte p146
	+++  NEW FIELD: byte p024
	+++  NEW FIELD: byte p145
	+++  NEW FIELD: byte p023
	+++  NEW FIELD: byte p144
	+++  NEW FIELD: byte p022
	+++  NEW FIELD: byte p143
	+++  NEW FIELD: byte p029
	+++  NEW FIELD: byte p028
	+++  NEW FIELD: byte p149
	+++  NEW FIELD: byte p027
	+++  NEW FIELD: byte p148
	+++  NEW FIELD: byte p026
	+++  NEW FIELD: byte p147
	+++  NEW FIELD: byte p061
	+++  NEW FIELD: byte p182
	+++  NEW FIELD: byte p060
	+++  NEW FIELD: byte p181
	+++  NEW FIELD: byte p180
	+++  NEW FIELD: byte p065
	+++  NEW FIELD: byte p186
	+++  NEW FIELD: byte p064
	+++  NEW FIELD: byte p185
	+++  NEW FIELD: org.openjdk.jmh.infra.Blackhole blackhole
	+++  NEW FIELD: byte p063
	+++  NEW FIELD: byte p184
	+++  NEW FIELD: byte p062
	+++  NEW FIELD: byte p183
	+++  NEW FIELD: byte p058
	+++  NEW FIELD: byte p179
	+++  NEW FIELD: byte p057
	+++  NEW FIELD: byte p178
	+++  NEW FIELD: byte p056
	+++  NEW FIELD: byte p177
	+++  NEW FIELD: byte p055
	+++  NEW FIELD: byte p176
	+++  NEW FIELD: byte p059
	+++  NEW FIELD: byte p050
	+++  NEW FIELD: byte p171
	+++  NEW FIELD: byte p170
	+++  NEW FIELD: byte p054
	+++  NEW FIELD: byte p175
	+++  NEW FIELD: byte p053
	+++  NEW FIELD: byte p174
	+++  NEW FIELD: byte p052
	+++  NEW FIELD: byte p173
	+++  NEW FIELD: byte p051
	+++  NEW FIELD: byte p172
	+++  NEW FIELD: byte p047
	+++  NEW FIELD: byte p168
	+++  NEW FIELD: byte p046
	+++  NEW FIELD: byte p167
	+++  NEW FIELD: byte p045
	+++  NEW FIELD: byte p166
	+++  NEW FIELD: byte p044
	+++  NEW FIELD: byte p165
	+++  NEW FIELD: byte p049
	+++  NEW FIELD: byte p048
	+++  NEW FIELD: byte p169
	+++  NEW FIELD: byte p083
	+++  NEW FIELD: byte p082
	+++  NEW FIELD: byte p081
	+++  NEW FIELD: byte p080
	+++  NEW FIELD: byte p087
	+++  NEW FIELD: byte p086
	+++  NEW FIELD: byte p085
	+++  NEW FIELD: byte p084
	+++  NEW FIELD: byte p079
	+++  NEW FIELD: byte p078
	+++  NEW FIELD: byte p199
	+++  NEW FIELD: byte p077
	+++  NEW FIELD: byte p198
	+++  NEW FIELD: byte p072
	+++  NEW FIELD: byte p193
	+++  NEW FIELD: byte p071
	+++  NEW FIELD: byte p192
	+++  NEW FIELD: byte p070
	+++  NEW FIELD: byte p191
	+++  NEW FIELD: byte p190
	+++  NEW FIELD: byte p076
	+++  NEW FIELD: byte p197
	+++  NEW FIELD: byte p075
	+++  NEW FIELD: byte p196
	+++  NEW FIELD: byte p074
	+++  NEW FIELD: byte p195
	+++  NEW FIELD: byte p073
	+++  NEW FIELD: byte p194
	+++  NEW FIELD: byte p069
	+++  NEW FIELD: byte p068
	+++  NEW FIELD: byte p189
	+++  NEW FIELD: byte p067
	+++  NEW FIELD: byte p188
	+++  NEW FIELD: byte p066
	+++  NEW FIELD: byte p187
	+++  NEW FIELD: byte p099
	+++  NEW FIELD: byte p090
	+++  NEW FIELD: byte p094
	+++  NEW FIELD: byte p093
	+++  NEW FIELD: byte p092
	+++  NEW FIELD: byte p091
	+++  NEW FIELD: byte p098
	+++  NEW FIELD: byte p097
	+++  NEW FIELD: byte p096
	+++  NEW FIELD: byte p095
	+++  NEW FIELD: byte p089
	+++  NEW FIELD: byte p088
	+++  NEW FIELD: org.openjdk.jmh.infra.IterationParams iterationParams
	+++  NEW FIELD: byte p212
	+++  NEW FIELD: byte p211
	+++  NEW FIELD: byte p210
	+++  NEW FIELD: byte p216
	+++  NEW FIELD: byte p215
	+++  NEW FIELD: byte p214
	+++  NEW FIELD: byte p213
	+++  NEW FIELD: byte p219
	+++  NEW FIELD: byte p218
	+++  NEW FIELD: byte p217
	+++  NEW FIELD: org.openjdk.jmh.infra.ThreadParams threadParams
	+++  NEW FIELD: org.openjdk.jmh.infra.Control notifyControl
	+++  NEW FIELD: byte p201
	+++  NEW FIELD: byte p200
	+++  NEW FIELD: byte p205
	+++  NEW FIELD: byte p204
	+++  NEW FIELD: byte p203
	+++  NEW FIELD: byte p202
	+++  NEW FIELD: byte p209
	+++  NEW FIELD: byte p208
	+++  NEW FIELD: byte p207
	+++  NEW FIELD: byte p206
	+++  NEW FIELD: STATIC(+) VOLATILE(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType f_benchmarkdeterministicindexedtable0_G
	+++  NEW FIELD: byte p120
	+++  NEW FIELD: byte p241
	+++  NEW FIELD: byte p240
	+++  NEW FIELD: byte p113
	+++  NEW FIELD: byte p234
	+++  NEW FIELD: byte p112
	+++  NEW FIELD: byte p233
	+++  NEW FIELD: byte p111
	+++  NEW FIELD: byte p232
	+++  NEW FIELD: byte p110
	+++  NEW FIELD: byte p231
	+++  NEW FIELD: byte p117
	+++  NEW FIELD: byte p238
	+++  NEW FIELD: byte p116
	+++  NEW FIELD: byte p237
	+++  NEW FIELD: byte p115
	+++  NEW FIELD: byte p236
	+++  NEW FIELD: byte p114
	+++  NEW FIELD: byte p235
	+++  NEW FIELD: byte p119
	+++  NEW FIELD: byte p118
	+++  NEW FIELD: byte p239
	+++  NEW FIELD: byte p230
	+++  NEW FIELD: byte p102
	+++  NEW FIELD: byte p223
	+++  NEW FIELD: byte p101
	+++  NEW FIELD: byte p222
	+++  NEW FIELD: byte p100
	+++  NEW FIELD: byte p221
	+++  NEW FIELD: byte p220
	+++  NEW FIELD: byte p106
	+++  NEW FIELD: byte p227
	+++  NEW FIELD: byte p105
	+++  NEW FIELD: byte p226
	+++  NEW FIELD: byte p104
	+++  NEW FIELD: byte p225
	+++  NEW FIELD: byte p103
	+++  NEW FIELD: byte p224
	+++  NEW FIELD: byte p109
	+++  NEW FIELD: byte p108
	+++  NEW FIELD: byte p229
	+++  NEW FIELD: byte p107
	+++  NEW FIELD: byte p228
	+++  NEW FIELD: org.openjdk.jmh.infra.BenchmarkParams benchmarkParams
	+++  NEW FIELD: byte p021
	+++  NEW FIELD: byte p142
	+++  NEW FIELD: byte p020
	+++  NEW FIELD: byte p141
	+++  NEW FIELD: byte p140
	+++  NEW FIELD: byte p014
	+++  NEW FIELD: byte p135
	+++  NEW FIELD: byte p013
	+++  NEW FIELD: byte p134
	+++  NEW FIELD: byte p255
	+++  NEW FIELD: byte p012
	+++  NEW FIELD: byte p133
	+++  NEW FIELD: byte p254
	+++  NEW FIELD: byte p011
	+++  NEW FIELD: byte p132
	+++  NEW FIELD: byte p253
	+++  NEW FIELD: byte p018
	+++  NEW FIELD: byte p139
	+++  NEW FIELD: byte p017
	+++  NEW FIELD: byte p138
	+++  NEW FIELD: byte p016
	+++  NEW FIELD: byte p137
	+++  NEW FIELD: byte p015
	+++  NEW FIELD: byte p136
	+++  NEW FIELD: byte p019
	+++  NEW FIELD: byte p010
	+++  NEW FIELD: byte p131
	+++  NEW FIELD: byte p252
	+++  NEW FIELD: byte p130
	+++  NEW FIELD: byte p251
	+++  NEW FIELD: byte p250
	+++  NEW FIELD: byte p003
	+++  NEW FIELD: byte p124
	+++  NEW FIELD: byte p245
	+++  NEW FIELD: byte p002
	+++  NEW FIELD: byte p123
	+++  NEW FIELD: byte p244
	+++  NEW FIELD: byte p001
	+++  NEW FIELD: byte p122
	+++  NEW FIELD: byte p243
	+++  NEW FIELD: byte p000
	+++  NEW FIELD: byte p121
	+++  NEW FIELD: byte p242
	+++  NEW FIELD: byte p007
	+++  NEW FIELD: byte p128
	+++  NEW FIELD: byte p249
	+++  NEW FIELD: byte p006
	+++  NEW FIELD: byte p127
	+++  NEW FIELD: byte p248
	+++  NEW FIELD: byte p005
	+++  NEW FIELD: byte p126
	+++  NEW FIELD: byte p247
	+++  NEW FIELD: byte p004
	+++  NEW FIELD: byte p125
	+++  NEW FIELD: byte p246
	+++  NEW FIELD: byte p009
	+++  NEW FIELD: byte p008
	+++  NEW FIELD: byte p129
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_concurrentIndexedTable_jmhTest()
	+++  NEW METHOD: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType _jmh_tryInit_f_benchmarkdeterministicindexedtable0_G(org.openjdk.jmh.runner.InfraControl)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult concurrentIndexedTable_AverageTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void concurrentIndexedTable_avgt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void concurrentIndexedTable_sample_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.openjdk.jmh.util.SampleBuffer, int, long, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult concurrentIndexedTable_SampleTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult concurrentIndexedTable_SingleShotTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void concurrentIndexedTable_ss_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult concurrentIndexedTable_Throughput(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void concurrentIndexedTable_thrpt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
+++  NEW CLASS: PUBLIC(+) FINAL(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_deterministicIndexedTable_jmhTest  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: byte p160
	+++  NEW FIELD: byte p043
	+++  NEW FIELD: byte p164
	+++  NEW FIELD: byte p042
	+++  NEW FIELD: byte p163
	+++  NEW FIELD: byte p041
	+++  NEW FIELD: byte p162
	+++  NEW FIELD: byte p040
	+++  NEW FIELD: byte p161
	+++  NEW FIELD: byte p036
	+++  NEW FIELD: byte p157
	+++  NEW FIELD: byte p035
	+++  NEW FIELD: byte p156
	+++  NEW FIELD: byte p034
	+++  NEW FIELD: byte p155
	+++  NEW FIELD: byte p033
	+++  NEW FIELD: byte p154
	+++  NEW FIELD: byte p039
	+++  NEW FIELD: byte p038
	+++  NEW FIELD: byte p159
	+++  NEW FIELD: byte p037
	+++  NEW FIELD: byte p158
	+++  NEW FIELD: byte p032
	+++  NEW FIELD: byte p153
	+++  NEW FIELD: byte p031
	+++  NEW FIELD: byte p152
	+++  NEW FIELD: byte p030
	+++  NEW FIELD: byte p151
	+++  NEW FIELD: byte p150
	+++  NEW FIELD: int startRndMask
	+++  NEW FIELD: byte p025
	+++  NEW FIELD: byte p146
	+++  NEW FIELD: byte p024
	+++  NEW FIELD: byte p145
	+++  NEW FIELD: byte p023
	+++  NEW FIELD: byte p144
	+++  NEW FIELD: byte p022
	+++  NEW FIELD: byte p143
	+++  NEW FIELD: byte p029
	+++  NEW FIELD: byte p028
	+++  NEW FIELD: byte p149
	+++  NEW FIELD: byte p027
	+++  NEW FIELD: byte p148
	+++  NEW FIELD: byte p026
	+++  NEW FIELD: byte p147
	+++  NEW FIELD: byte p061
	+++  NEW FIELD: byte p182
	+++  NEW FIELD: byte p060
	+++  NEW FIELD: byte p181
	+++  NEW FIELD: byte p180
	+++  NEW FIELD: byte p065
	+++  NEW FIELD: byte p186
	+++  NEW FIELD: byte p064
	+++  NEW FIELD: byte p185
	+++  NEW FIELD: org.openjdk.jmh.infra.Blackhole blackhole
	+++  NEW FIELD: byte p063
	+++  NEW FIELD: byte p184
	+++  NEW FIELD: byte p062
	+++  NEW FIELD: byte p183
	+++  NEW FIELD: byte p058
	+++  NEW FIELD: byte p179
	+++  NEW FIELD: byte p057
	+++  NEW FIELD: byte p178
	+++  NEW FIELD: byte p056
	+++  NEW FIELD: byte p177
	+++  NEW FIELD: byte p055
	+++  NEW FIELD: byte p176
	+++  NEW FIELD: byte p059
	+++  NEW FIELD: byte p050
	+++  NEW FIELD: byte p171
	+++  NEW FIELD: byte p170
	+++  NEW FIELD: byte p054
	+++  NEW FIELD: byte p175
	+++  NEW FIELD: byte p053
	+++  NEW FIELD: byte p174
	+++  NEW FIELD: byte p052
	+++  NEW FIELD: byte p173
	+++  NEW FIELD: byte p051
	+++  NEW FIELD: byte p172
	+++  NEW FIELD: byte p047
	+++  NEW FIELD: byte p168
	+++  NEW FIELD: byte p046
	+++  NEW FIELD: byte p167
	+++  NEW FIELD: byte p045
	+++  NEW FIELD: byte p166
	+++  NEW FIELD: byte p044
	+++  NEW FIELD: byte p165
	+++  NEW FIELD: byte p049
	+++  NEW FIELD: byte p048
	+++  NEW FIELD: byte p169
	+++  NEW FIELD: byte p083
	+++  NEW FIELD: byte p082
	+++  NEW FIELD: byte p081
	+++  NEW FIELD: byte p080
	+++  NEW FIELD: byte p087
	+++  NEW FIELD: byte p086
	+++  NEW FIELD: byte p085
	+++  NEW FIELD: byte p084
	+++  NEW FIELD: byte p079
	+++  NEW FIELD: byte p078
	+++  NEW FIELD: byte p199
	+++  NEW FIELD: byte p077
	+++  NEW FIELD: byte p198
	+++  NEW FIELD: byte p072
	+++  NEW FIELD: byte p193
	+++  NEW FIELD: byte p071
	+++  NEW FIELD: byte p192
	+++  NEW FIELD: byte p070
	+++  NEW FIELD: byte p191
	+++  NEW FIELD: byte p190
	+++  NEW FIELD: byte p076
	+++  NEW FIELD: byte p197
	+++  NEW FIELD: byte p075
	+++  NEW FIELD: byte p196
	+++  NEW FIELD: byte p074
	+++  NEW FIELD: byte p195
	+++  NEW FIELD: byte p073
	+++  NEW FIELD: byte p194
	+++  NEW FIELD: byte p069
	+++  NEW FIELD: byte p068
	+++  NEW FIELD: byte p189
	+++  NEW FIELD: byte p067
	+++  NEW FIELD: byte p188
	+++  NEW FIELD: byte p066
	+++  NEW FIELD: byte p187
	+++  NEW FIELD: byte p099
	+++  NEW FIELD: byte p090
	+++  NEW FIELD: byte p094
	+++  NEW FIELD: byte p093
	+++  NEW FIELD: byte p092
	+++  NEW FIELD: byte p091
	+++  NEW FIELD: byte p098
	+++  NEW FIELD: byte p097
	+++  NEW FIELD: byte p096
	+++  NEW FIELD: byte p095
	+++  NEW FIELD: byte p089
	+++  NEW FIELD: byte p088
	+++  NEW FIELD: org.openjdk.jmh.infra.IterationParams iterationParams
	+++  NEW FIELD: byte p212
	+++  NEW FIELD: byte p211
	+++  NEW FIELD: byte p210
	+++  NEW FIELD: byte p216
	+++  NEW FIELD: byte p215
	+++  NEW FIELD: byte p214
	+++  NEW FIELD: byte p213
	+++  NEW FIELD: byte p219
	+++  NEW FIELD: byte p218
	+++  NEW FIELD: byte p217
	+++  NEW FIELD: org.openjdk.jmh.infra.ThreadParams threadParams
	+++  NEW FIELD: org.openjdk.jmh.infra.Control notifyControl
	+++  NEW FIELD: byte p201
	+++  NEW FIELD: byte p200
	+++  NEW FIELD: byte p205
	+++  NEW FIELD: byte p204
	+++  NEW FIELD: byte p203
	+++  NEW FIELD: byte p202
	+++  NEW FIELD: byte p209
	+++  NEW FIELD: byte p208
	+++  NEW FIELD: byte p207
	+++  NEW FIELD: byte p206
	+++  NEW FIELD: STATIC(+) VOLATILE(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType f_benchmarkdeterministicindexedtable0_G
	+++  NEW FIELD: byte p120
	+++  NEW FIELD: byte p241
	+++  NEW FIELD: byte p240
	+++  NEW FIELD: byte p113
	+++  NEW FIELD: byte p234
	+++  NEW FIELD: byte p112
	+++  NEW FIELD: byte p233
	+++  NEW FIELD: byte p111
	+++  NEW FIELD: byte p232
	+++  NEW FIELD: byte p110
	+++  NEW FIELD: byte p231
	+++  NEW FIELD: byte p117
	+++  NEW FIELD: byte p238
	+++  NEW FIELD: byte p116
	+++  NEW FIELD: byte p237
	+++  NEW FIELD: byte p115
	+++  NEW FIELD: byte p236
	+++  NEW FIELD: byte p114
	+++  NEW FIELD: byte p235
	+++  NEW FIELD: byte p119
	+++  NEW FIELD: byte p118
	+++  NEW FIELD: byte p239
	+++  NEW FIELD: byte p230
	+++  NEW FIELD: byte p102
	+++  NEW FIELD: byte p223
	+++  NEW FIELD: byte p101
	+++  NEW FIELD: byte p222
	+++  NEW FIELD: byte p100
	+++  NEW FIELD: byte p221
	+++  NEW FIELD: byte p220
	+++  NEW FIELD: byte p106
	+++  NEW FIELD: byte p227
	+++  NEW FIELD: byte p105
	+++  NEW FIELD: byte p226
	+++  NEW FIELD: byte p104
	+++  NEW FIELD: byte p225
	+++  NEW FIELD: byte p103
	+++  NEW FIELD: byte p224
	+++  NEW FIELD: byte p109
	+++  NEW FIELD: byte p108
	+++  NEW FIELD: byte p229
	+++  NEW FIELD: byte p107
	+++  NEW FIELD: byte p228
	+++  NEW FIELD: org.openjdk.jmh.infra.BenchmarkParams benchmarkParams
	+++  NEW FIELD: byte p021
	+++  NEW FIELD: byte p142
	+++  NEW FIELD: byte p020
	+++  NEW FIELD: byte p141
	+++  NEW FIELD: byte p140
	+++  NEW FIELD: byte p014
	+++  NEW FIELD: byte p135
	+++  NEW FIELD: byte p013
	+++  NEW FIELD: byte p134
	+++  NEW FIELD: byte p255
	+++  NEW FIELD: byte p012
	+++  NEW FIELD: byte p133
	+++  NEW FIELD: byte p254
	+++  NEW FIELD: byte p011
	+++  NEW FIELD: byte p132
	+++  NEW FIELD: byte p253
	+++  NEW FIELD: byte p018
	+++  NEW FIELD: byte p139
	+++  NEW FIELD: byte p017
	+++  NEW FIELD: byte p138
	+++  NEW FIELD: byte p016
	+++  NEW FIELD: byte p137
	+++  NEW FIELD: byte p015
	+++  NEW FIELD: byte p136
	+++  NEW FIELD: byte p019
	+++  NEW FIELD: byte p010
	+++  NEW FIELD: byte p131
	+++  NEW FIELD: byte p252
	+++  NEW FIELD: byte p130
	+++  NEW FIELD: byte p251
	+++  NEW FIELD: byte p250
	+++  NEW FIELD: byte p003
	+++  NEW FIELD: byte p124
	+++  NEW FIELD: byte p245
	+++  NEW FIELD: byte p002
	+++  NEW FIELD: byte p123
	+++  NEW FIELD: byte p244
	+++  NEW FIELD: byte p001
	+++  NEW FIELD: byte p122
	+++  NEW FIELD: byte p243
	+++  NEW FIELD: byte p000
	+++  NEW FIELD: byte p121
	+++  NEW FIELD: byte p242
	+++  NEW FIELD: byte p007
	+++  NEW FIELD: byte p128
	+++  NEW FIELD: byte p249
	+++  NEW FIELD: byte p006
	+++  NEW FIELD: byte p127
	+++  NEW FIELD: byte p248
	+++  NEW FIELD: byte p005
	+++  NEW FIELD: byte p126
	+++  NEW FIELD: byte p247
	+++  NEW FIELD: byte p004
	+++  NEW FIELD: byte p125
	+++  NEW FIELD: byte p246
	+++  NEW FIELD: byte p009
	+++  NEW FIELD: byte p008
	+++  NEW FIELD: byte p129
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_deterministicIndexedTable_jmhTest()
	+++  NEW METHOD: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType _jmh_tryInit_f_benchmarkdeterministicindexedtable0_G(org.openjdk.jmh.runner.InfraControl)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult deterministicIndexedTable_AverageTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void deterministicIndexedTable_avgt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void deterministicIndexedTable_sample_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.openjdk.jmh.util.SampleBuffer, int, long, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult deterministicIndexedTable_SampleTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult deterministicIndexedTable_SingleShotTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void deterministicIndexedTable_ss_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult deterministicIndexedTable_Throughput(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void deterministicIndexedTable_thrpt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B3
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_jmhType()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B1  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.perf.BenchmarkDeterministicIndexedTable
	+++  NEW FIELD: byte b1_250
	+++  NEW FIELD: byte b1_010
	+++  NEW FIELD: byte b1_131
	+++  NEW FIELD: byte b1_252
	+++  NEW FIELD: byte b1_130
	+++  NEW FIELD: byte b1_251
	+++  NEW FIELD: byte b1_009
	+++  NEW FIELD: byte b1_008
	+++  NEW FIELD: byte b1_129
	+++  NEW FIELD: byte b1_001
	+++  NEW FIELD: byte b1_122
	+++  NEW FIELD: byte b1_243
	+++  NEW FIELD: byte b1_000
	+++  NEW FIELD: byte b1_121
	+++  NEW FIELD: byte b1_242
	+++  NEW FIELD: byte b1_003
	+++  NEW FIELD: byte b1_124
	+++  NEW FIELD: byte b1_245
	+++  NEW FIELD: byte b1_002
	+++  NEW FIELD: byte b1_123
	+++  NEW FIELD: byte b1_244
	+++  NEW FIELD: byte b1_005
	+++  NEW FIELD: byte b1_126
	+++  NEW FIELD: byte b1_247
	+++  NEW FIELD: byte b1_004
	+++  NEW FIELD: byte b1_125
	+++  NEW FIELD: byte b1_246
	+++  NEW FIELD: byte b1_007
	+++  NEW FIELD: byte b1_128
	+++  NEW FIELD: byte b1_249
	+++  NEW FIELD: byte b1_006
	+++  NEW FIELD: byte b1_127
	+++  NEW FIELD: byte b1_248
	+++  NEW FIELD: byte b1_140
	+++  NEW FIELD: byte b1_021
	+++  NEW FIELD: byte b1_142
	+++  NEW FIELD: byte b1_020
	+++  NEW FIELD: byte b1_141
	+++  NEW FIELD: byte b1_019
	+++  NEW FIELD: byte b1_012
	+++  NEW FIELD: byte b1_133
	+++  NEW FIELD: byte b1_254
	+++  NEW FIELD: byte b1_011
	+++  NEW FIELD: byte b1_132
	+++  NEW FIELD: byte b1_253
	+++  NEW FIELD: byte b1_014
	+++  NEW FIELD: byte b1_135
	+++  NEW FIELD: byte b1_013
	+++  NEW FIELD: byte b1_134
	+++  NEW FIELD: byte b1_255
	+++  NEW FIELD: byte b1_016
	+++  NEW FIELD: byte b1_137
	+++  NEW FIELD: byte b1_015
	+++  NEW FIELD: byte b1_136
	+++  NEW FIELD: byte b1_018
	+++  NEW FIELD: byte b1_139
	+++  NEW FIELD: byte b1_017
	+++  NEW FIELD: byte b1_138
	+++  NEW FIELD: byte b1_030
	+++  NEW FIELD: byte b1_151
	+++  NEW FIELD: byte b1_150
	+++  NEW FIELD: byte b1_032
	+++  NEW FIELD: byte b1_153
	+++  NEW FIELD: byte b1_031
	+++  NEW FIELD: byte b1_152
	+++  NEW FIELD: byte b1_023
	+++  NEW FIELD: byte b1_144
	+++  NEW FIELD: byte b1_022
	+++  NEW FIELD: byte b1_143
	+++  NEW FIELD: byte b1_025
	+++  NEW FIELD: byte b1_146
	+++  NEW FIELD: byte b1_024
	+++  NEW FIELD: byte b1_145
	+++  NEW FIELD: byte b1_027
	+++  NEW FIELD: byte b1_148
	+++  NEW FIELD: byte b1_026
	+++  NEW FIELD: byte b1_147
	+++  NEW FIELD: byte b1_029
	+++  NEW FIELD: byte b1_028
	+++  NEW FIELD: byte b1_149
	+++  NEW FIELD: byte b1_160
	+++  NEW FIELD: byte b1_041
	+++  NEW FIELD: byte b1_162
	+++  NEW FIELD: byte b1_040
	+++  NEW FIELD: byte b1_161
	+++  NEW FIELD: byte b1_043
	+++  NEW FIELD: byte b1_164
	+++  NEW FIELD: byte b1_042
	+++  NEW FIELD: byte b1_163
	+++  NEW FIELD: byte b1_034
	+++  NEW FIELD: byte b1_155
	+++  NEW FIELD: byte b1_033
	+++  NEW FIELD: byte b1_154
	+++  NEW FIELD: byte b1_036
	+++  NEW FIELD: byte b1_157
	+++  NEW FIELD: byte b1_035
	+++  NEW FIELD: byte b1_156
	+++  NEW FIELD: byte b1_038
	+++  NEW FIELD: byte b1_159
	+++  NEW FIELD: byte b1_037
	+++  NEW FIELD: byte b1_158
	+++  NEW FIELD: byte b1_039
	+++  NEW FIELD: byte b1_050
	+++  NEW FIELD: byte b1_171
	+++  NEW FIELD: byte b1_170
	+++  NEW FIELD: byte b1_052
	+++  NEW FIELD: byte b1_173
	+++  NEW FIELD: byte b1_051
	+++  NEW FIELD: byte b1_172
	+++  NEW FIELD: byte b1_054
	+++  NEW FIELD: byte b1_175
	+++  NEW FIELD: byte b1_053
	+++  NEW FIELD: byte b1_174
	+++  NEW FIELD: byte b1_045
	+++  NEW FIELD: byte b1_166
	+++  NEW FIELD: byte b1_044
	+++  NEW FIELD: byte b1_165
	+++  NEW FIELD: byte b1_047
	+++  NEW FIELD: byte b1_168
	+++  NEW FIELD: byte b1_046
	+++  NEW FIELD: byte b1_167
	+++  NEW FIELD: byte b1_049
	+++  NEW FIELD: byte b1_048
	+++  NEW FIELD: byte b1_169
	+++  NEW FIELD: byte b1_180
	+++  NEW FIELD: byte b1_061
	+++  NEW FIELD: byte b1_182
	+++  NEW FIELD: byte b1_060
	+++  NEW FIELD: byte b1_181
	+++  NEW FIELD: byte b1_063
	+++  NEW FIELD: byte b1_184
	+++  NEW FIELD: byte b1_062
	+++  NEW FIELD: byte b1_183
	+++  NEW FIELD: byte b1_065
	+++  NEW FIELD: byte b1_186
	+++  NEW FIELD: byte b1_064
	+++  NEW FIELD: byte b1_185
	+++  NEW FIELD: byte b1_056
	+++  NEW FIELD: byte b1_177
	+++  NEW FIELD: byte b1_055
	+++  NEW FIELD: byte b1_176
	+++  NEW FIELD: byte b1_058
	+++  NEW FIELD: byte b1_179
	+++  NEW FIELD: byte b1_057
	+++  NEW FIELD: byte b1_178
	+++  NEW FIELD: byte b1_059
	+++  NEW FIELD: byte b1_070
	+++  NEW FIELD: byte b1_191
	+++  NEW FIELD: byte b1_190
	+++  NEW FIELD: byte b1_072
	+++  NEW FIELD: byte b1_193
	+++  NEW FIELD: byte b1_071
	+++  NEW FIELD: byte b1_192
	+++  NEW FIELD: byte b1_074
	+++  NEW FIELD: byte b1_195
	+++  NEW FIELD: byte b1_073
	+++  NEW FIELD: byte b1_194
	+++  NEW FIELD: byte b1_076
	+++  NEW FIELD: byte b1_197
	+++  NEW FIELD: byte b1_075
	+++  NEW FIELD: byte b1_196
	+++  NEW FIELD: byte b1_067
	+++  NEW FIELD: byte b1_188
	+++  NEW FIELD: byte b1_066
	+++  NEW FIELD: byte b1_187
	+++  NEW FIELD: byte b1_069
	+++  NEW FIELD: byte b1_068
	+++  NEW FIELD: byte b1_189
	+++  NEW FIELD: byte b1_081
	+++  NEW FIELD: byte b1_080
	+++  NEW FIELD: byte b1_083
	+++  NEW FIELD: byte b1_082
	+++  NEW FIELD: byte b1_085
	+++  NEW FIELD: byte b1_084
	+++  NEW FIELD: byte b1_087
	+++  NEW FIELD: byte b1_086
	+++  NEW FIELD: byte b1_078
	+++  NEW FIELD: byte b1_199
	+++  NEW FIELD: byte b1_077
	+++  NEW FIELD: byte b1_198
	+++  NEW FIELD: byte b1_079
	+++  NEW FIELD: byte b1_092
	+++  NEW FIELD: byte b1_091
	+++  NEW FIELD: byte b1_094
	+++  NEW FIELD: byte b1_093
	+++  NEW FIELD: byte b1_096
	+++  NEW FIELD: byte b1_095
	+++  NEW FIELD: byte b1_098
	+++  NEW FIELD: byte b1_097
	+++  NEW FIELD: byte b1_090
	+++  NEW FIELD: byte b1_089
	+++  NEW FIELD: byte b1_088
	+++  NEW FIELD: byte b1_099
	+++  NEW FIELD: byte b1_207
	+++  NEW FIELD: byte b1_206
	+++  NEW FIELD: byte b1_209
	+++  NEW FIELD: byte b1_208
	+++  NEW FIELD: byte b1_201
	+++  NEW FIELD: byte b1_200
	+++  NEW FIELD: byte b1_203
	+++  NEW FIELD: byte b1_202
	+++  NEW FIELD: byte b1_205
	+++  NEW FIELD: byte b1_204
	+++  NEW FIELD: byte b1_218
	+++  NEW FIELD: byte b1_217
	+++  NEW FIELD: byte b1_219
	+++  NEW FIELD: byte b1_210
	+++  NEW FIELD: byte b1_212
	+++  NEW FIELD: byte b1_211
	+++  NEW FIELD: byte b1_214
	+++  NEW FIELD: byte b1_213
	+++  NEW FIELD: byte b1_216
	+++  NEW FIELD: byte b1_215
	+++  NEW FIELD: byte b1_230
	+++  NEW FIELD: byte b1_108
	+++  NEW FIELD: byte b1_229
	+++  NEW FIELD: byte b1_107
	+++  NEW FIELD: byte b1_228
	+++  NEW FIELD: byte b1_109
	+++  NEW FIELD: byte b1_100
	+++  NEW FIELD: byte b1_221
	+++  NEW FIELD: byte b1_220
	+++  NEW FIELD: byte b1_102
	+++  NEW FIELD: byte b1_223
	+++  NEW FIELD: byte b1_101
	+++  NEW FIELD: byte b1_222
	+++  NEW FIELD: byte b1_104
	+++  NEW FIELD: byte b1_225
	+++  NEW FIELD: byte b1_103
	+++  NEW FIELD: byte b1_224
	+++  NEW FIELD: byte b1_106
	+++  NEW FIELD: byte b1_227
	+++  NEW FIELD: byte b1_105
	+++  NEW FIELD: byte b1_226
	+++  NEW FIELD: byte b1_120
	+++  NEW FIELD: byte b1_241
	+++  NEW FIELD: byte b1_240
	+++  NEW FIELD: byte b1_119
	+++  NEW FIELD: byte b1_118
	+++  NEW FIELD: byte b1_239
	+++  NEW FIELD: byte b1_111
	+++  NEW FIELD: byte b1_232
	+++  NEW FIELD: byte b1_110
	+++  NEW FIELD: byte b1_231
	+++  NEW FIELD: byte b1_113
	+++  NEW FIELD: byte b1_234
	+++  NEW FIELD: byte b1_112
	+++  NEW FIELD: byte b1_233
	+++  NEW FIELD: byte b1_115
	+++  NEW FIELD: byte b1_236
	+++  NEW FIELD: byte b1_114
	+++  NEW FIELD: byte b1_235
	+++  NEW FIELD: byte b1_117
	+++  NEW FIELD: byte b1_238
	+++  NEW FIELD: byte b1_116
	+++  NEW FIELD: byte b1_237
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_jmhType_B1()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B1
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> tearTrialMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int tearTrialMutex
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> tearIterationMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int setupIterationMutex
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> setupIterationMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int setupInvocationMutex
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int tearInvocationMutex
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> setupInvocationMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) boolean readyIteration
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> tearInvocationMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int tearIterationMutex
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) boolean readyTrial
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2> setupTrialMutexUpdater
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) int setupTrialMutex
	+++  NEW FIELD: PUBLIC(+) VOLATILE(+) boolean readyInvocation
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_jmhType_B2()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B3  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType_B2
	+++  NEW FIELD: byte b3_098
	+++  NEW FIELD: byte b3_097
	+++  NEW FIELD: byte b3_099
	+++  NEW FIELD: byte b3_094
	+++  NEW FIELD: byte b3_093
	+++  NEW FIELD: byte b3_096
	+++  NEW FIELD: byte b3_095
	+++  NEW FIELD: byte b3_090
	+++  NEW FIELD: byte b3_092
	+++  NEW FIELD: byte b3_091
	+++  NEW FIELD: byte b3_087
	+++  NEW FIELD: byte b3_086
	+++  NEW FIELD: byte b3_089
	+++  NEW FIELD: byte b3_088
	+++  NEW FIELD: byte b3_212
	+++  NEW FIELD: byte b3_211
	+++  NEW FIELD: byte b3_214
	+++  NEW FIELD: byte b3_213
	+++  NEW FIELD: byte b3_210
	+++  NEW FIELD: byte b3_219
	+++  NEW FIELD: byte b3_216
	+++  NEW FIELD: byte b3_215
	+++  NEW FIELD: byte b3_218
	+++  NEW FIELD: byte b3_217
	+++  NEW FIELD: byte b3_201
	+++  NEW FIELD: byte b3_200
	+++  NEW FIELD: byte b3_203
	+++  NEW FIELD: byte b3_202
	+++  NEW FIELD: byte b3_209
	+++  NEW FIELD: byte b3_208
	+++  NEW FIELD: byte b3_205
	+++  NEW FIELD: byte b3_204
	+++  NEW FIELD: byte b3_207
	+++  NEW FIELD: byte b3_206
	+++  NEW FIELD: byte b3_113
	+++  NEW FIELD: byte b3_234
	+++  NEW FIELD: byte b3_112
	+++  NEW FIELD: byte b3_233
	+++  NEW FIELD: byte b3_115
	+++  NEW FIELD: byte b3_236
	+++  NEW FIELD: byte b3_114
	+++  NEW FIELD: byte b3_235
	+++  NEW FIELD: byte b3_230
	+++  NEW FIELD: byte b3_111
	+++  NEW FIELD: byte b3_232
	+++  NEW FIELD: byte b3_110
	+++  NEW FIELD: byte b3_231
	+++  NEW FIELD: byte b3_117
	+++  NEW FIELD: byte b3_238
	+++  NEW FIELD: byte b3_116
	+++  NEW FIELD: byte b3_237
	+++  NEW FIELD: byte b3_119
	+++  NEW FIELD: byte b3_118
	+++  NEW FIELD: byte b3_239
	+++  NEW FIELD: byte b3_102
	+++  NEW FIELD: byte b3_223
	+++  NEW FIELD: byte b3_101
	+++  NEW FIELD: byte b3_222
	+++  NEW FIELD: byte b3_104
	+++  NEW FIELD: byte b3_225
	+++  NEW FIELD: byte b3_103
	+++  NEW FIELD: byte b3_224
	+++  NEW FIELD: byte b3_100
	+++  NEW FIELD: byte b3_221
	+++  NEW FIELD: byte b3_220
	+++  NEW FIELD: byte b3_109
	+++  NEW FIELD: byte b3_106
	+++  NEW FIELD: byte b3_227
	+++  NEW FIELD: byte b3_105
	+++  NEW FIELD: byte b3_226
	+++  NEW FIELD: byte b3_108
	+++  NEW FIELD: byte b3_229
	+++  NEW FIELD: byte b3_107
	+++  NEW FIELD: byte b3_228
	+++  NEW FIELD: byte b3_140
	+++  NEW FIELD: byte b3_014
	+++  NEW FIELD: byte b3_135
	+++  NEW FIELD: byte b3_013
	+++  NEW FIELD: byte b3_134
	+++  NEW FIELD: byte b3_255
	+++  NEW FIELD: byte b3_016
	+++  NEW FIELD: byte b3_137
	+++  NEW FIELD: byte b3_015
	+++  NEW FIELD: byte b3_136
	+++  NEW FIELD: byte b3_010
	+++  NEW FIELD: byte b3_131
	+++  NEW FIELD: byte b3_252
	+++  NEW FIELD: byte b3_130
	+++  NEW FIELD: byte b3_251
	+++  NEW FIELD: byte b3_012
	+++  NEW FIELD: byte b3_133
	+++  NEW FIELD: byte b3_254
	+++  NEW FIELD: byte b3_011
	+++  NEW FIELD: byte b3_132
	+++  NEW FIELD: byte b3_253
	+++  NEW FIELD: byte b3_018
	+++  NEW FIELD: byte b3_139
	+++  NEW FIELD: byte b3_017
	+++  NEW FIELD: byte b3_138
	+++  NEW FIELD: byte b3_019
	+++  NEW FIELD: byte b3_250
	+++  NEW FIELD: byte b3_003
	+++  NEW FIELD: byte b3_124
	+++  NEW FIELD: byte b3_245
	+++  NEW FIELD: byte b3_002
	+++  NEW FIELD: byte b3_123
	+++  NEW FIELD: byte b3_244
	+++  NEW FIELD: byte b3_005
	+++  NEW FIELD: byte b3_126
	+++  NEW FIELD: byte b3_247
	+++  NEW FIELD: byte b3_004
	+++  NEW FIELD: byte b3_125
	+++  NEW FIELD: byte b3_246
	+++  NEW FIELD: byte b3_120
	+++  NEW FIELD: byte b3_241
	+++  NEW FIELD: byte b3_240
	+++  NEW FIELD: byte b3_001
	+++  NEW FIELD: byte b3_122
	+++  NEW FIELD: byte b3_243
	+++  NEW FIELD: byte b3_000
	+++  NEW FIELD: byte b3_121
	+++  NEW FIELD: byte b3_242
	+++  NEW FIELD: byte b3_007
	+++  NEW FIELD: byte b3_128
	+++  NEW FIELD: byte b3_249
	+++  NEW FIELD: byte b3_006
	+++  NEW FIELD: byte b3_127
	+++  NEW FIELD: byte b3_248
	+++  NEW FIELD: byte b3_009
	+++  NEW FIELD: byte b3_008
	+++  NEW FIELD: byte b3_129
	+++  NEW FIELD: byte b3_160
	+++  NEW FIELD: byte b3_041
	+++  NEW FIELD: byte b3_162
	+++  NEW FIELD: byte b3_040
	+++  NEW FIELD: byte b3_161
	+++  NEW FIELD: byte b3_036
	+++  NEW FIELD: byte b3_157
	+++  NEW FIELD: byte b3_035
	+++  NEW FIELD: byte b3_156
	+++  NEW FIELD: byte b3_038
	+++  NEW FIELD: byte b3_159
	+++  NEW FIELD: byte b3_037
	+++  NEW FIELD: byte b3_158
	+++  NEW FIELD: byte b3_032
	+++  NEW FIELD: byte b3_153
	+++  NEW FIELD: byte b3_031
	+++  NEW FIELD: byte b3_152
	+++  NEW FIELD: byte b3_034
	+++  NEW FIELD: byte b3_155
	+++  NEW FIELD: byte b3_033
	+++  NEW FIELD: byte b3_154
	+++  NEW FIELD: byte b3_039
	+++  NEW FIELD: byte b3_030
	+++  NEW FIELD: byte b3_151
	+++  NEW FIELD: byte b3_150
	+++  NEW FIELD: byte b3_025
	+++  NEW FIELD: byte b3_146
	+++  NEW FIELD: byte b3_024
	+++  NEW FIELD: byte b3_145
	+++  NEW FIELD: byte b3_027
	+++  NEW FIELD: byte b3_148
	+++  NEW FIELD: byte b3_026
	+++  NEW FIELD: byte b3_147
	+++  NEW FIELD: byte b3_021
	+++  NEW FIELD: byte b3_142
	+++  NEW FIELD: byte b3_020
	+++  NEW FIELD: byte b3_141
	+++  NEW FIELD: byte b3_023
	+++  NEW FIELD: byte b3_144
	+++  NEW FIELD: byte b3_022
	+++  NEW FIELD: byte b3_143
	+++  NEW FIELD: byte b3_029
	+++  NEW FIELD: byte b3_028
	+++  NEW FIELD: byte b3_149
	+++  NEW FIELD: byte b3_061
	+++  NEW FIELD: byte b3_182
	+++  NEW FIELD: byte b3_060
	+++  NEW FIELD: byte b3_181
	+++  NEW FIELD: byte b3_063
	+++  NEW FIELD: byte b3_184
	+++  NEW FIELD: byte b3_062
	+++  NEW FIELD: byte b3_183
	+++  NEW FIELD: byte b3_180
	+++  NEW FIELD: byte b3_058
	+++  NEW FIELD: byte b3_179
	+++  NEW FIELD: byte b3_057
	+++  NEW FIELD: byte b3_178
	+++  NEW FIELD: byte b3_059
	+++  NEW FIELD: byte b3_054
	+++  NEW FIELD: byte b3_175
	+++  NEW FIELD: byte b3_053
	+++  NEW FIELD: byte b3_174
	+++  NEW FIELD: byte b3_056
	+++  NEW FIELD: byte b3_177
	+++  NEW FIELD: byte b3_055
	+++  NEW FIELD: byte b3_176
	+++  NEW FIELD: byte b3_050
	+++  NEW FIELD: byte b3_171
	+++  NEW FIELD: byte b3_170
	+++  NEW FIELD: byte b3_052
	+++  NEW FIELD: byte b3_173
	+++  NEW FIELD: byte b3_051
	+++  NEW FIELD: byte b3_172
	+++  NEW FIELD: byte b3_047
	+++  NEW FIELD: byte b3_168
	+++  NEW FIELD: byte b3_046
	+++  NEW FIELD: byte b3_167
	+++  NEW FIELD: byte b3_049
	+++  NEW FIELD: byte b3_048
	+++  NEW FIELD: byte b3_169
	+++  NEW FIELD: byte b3_043
	+++  NEW FIELD: byte b3_164
	+++  NEW FIELD: byte b3_042
	+++  NEW FIELD: byte b3_163
	+++  NEW FIELD: byte b3_045
	+++  NEW FIELD: byte b3_166
	+++  NEW FIELD: byte b3_044
	+++  NEW FIELD: byte b3_165
	+++  NEW FIELD: byte b3_083
	+++  NEW FIELD: byte b3_082
	+++  NEW FIELD: byte b3_085
	+++  NEW FIELD: byte b3_084
	+++  NEW FIELD: byte b3_081
	+++  NEW FIELD: byte b3_080
	+++  NEW FIELD: byte b3_079
	+++  NEW FIELD: byte b3_076
	+++  NEW FIELD: byte b3_197
	+++  NEW FIELD: byte b3_075
	+++  NEW FIELD: byte b3_196
	+++  NEW FIELD: byte b3_078
	+++  NEW FIELD: byte b3_199
	+++  NEW FIELD: byte b3_077
	+++  NEW FIELD: byte b3_198
	+++  NEW FIELD: byte b3_072
	+++  NEW FIELD: byte b3_193
	+++  NEW FIELD: byte b3_071
	+++  NEW FIELD: byte b3_192
	+++  NEW FIELD: byte b3_074
	+++  NEW FIELD: byte b3_195
	+++  NEW FIELD: byte b3_073
	+++  NEW FIELD: byte b3_194
	+++  NEW FIELD: byte b3_070
	+++  NEW FIELD: byte b3_191
	+++  NEW FIELD: byte b3_190
	+++  NEW FIELD: byte b3_069
	+++  NEW FIELD: byte b3_068
	+++  NEW FIELD: byte b3_189
	+++  NEW FIELD: byte b3_065
	+++  NEW FIELD: byte b3_186
	+++  NEW FIELD: byte b3_064
	+++  NEW FIELD: byte b3_185
	+++  NEW FIELD: byte b3_067
	+++  NEW FIELD: byte b3_188
	+++  NEW FIELD: byte b3_066
	+++  NEW FIELD: byte b3_187
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_jmhType_B3()
+++  NEW CLASS: PUBLIC(+) FINAL(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_simpleIndexedTable_jmhTest  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: byte p160
	+++  NEW FIELD: byte p043
	+++  NEW FIELD: byte p164
	+++  NEW FIELD: byte p042
	+++  NEW FIELD: byte p163
	+++  NEW FIELD: byte p041
	+++  NEW FIELD: byte p162
	+++  NEW FIELD: byte p040
	+++  NEW FIELD: byte p161
	+++  NEW FIELD: byte p036
	+++  NEW FIELD: byte p157
	+++  NEW FIELD: byte p035
	+++  NEW FIELD: byte p156
	+++  NEW FIELD: byte p034
	+++  NEW FIELD: byte p155
	+++  NEW FIELD: byte p033
	+++  NEW FIELD: byte p154
	+++  NEW FIELD: byte p039
	+++  NEW FIELD: byte p038
	+++  NEW FIELD: byte p159
	+++  NEW FIELD: byte p037
	+++  NEW FIELD: byte p158
	+++  NEW FIELD: byte p032
	+++  NEW FIELD: byte p153
	+++  NEW FIELD: byte p031
	+++  NEW FIELD: byte p152
	+++  NEW FIELD: byte p030
	+++  NEW FIELD: byte p151
	+++  NEW FIELD: byte p150
	+++  NEW FIELD: int startRndMask
	+++  NEW FIELD: byte p025
	+++  NEW FIELD: byte p146
	+++  NEW FIELD: byte p024
	+++  NEW FIELD: byte p145
	+++  NEW FIELD: byte p023
	+++  NEW FIELD: byte p144
	+++  NEW FIELD: byte p022
	+++  NEW FIELD: byte p143
	+++  NEW FIELD: byte p029
	+++  NEW FIELD: byte p028
	+++  NEW FIELD: byte p149
	+++  NEW FIELD: byte p027
	+++  NEW FIELD: byte p148
	+++  NEW FIELD: byte p026
	+++  NEW FIELD: byte p147
	+++  NEW FIELD: byte p061
	+++  NEW FIELD: byte p182
	+++  NEW FIELD: byte p060
	+++  NEW FIELD: byte p181
	+++  NEW FIELD: byte p180
	+++  NEW FIELD: byte p065
	+++  NEW FIELD: byte p186
	+++  NEW FIELD: byte p064
	+++  NEW FIELD: byte p185
	+++  NEW FIELD: org.openjdk.jmh.infra.Blackhole blackhole
	+++  NEW FIELD: byte p063
	+++  NEW FIELD: byte p184
	+++  NEW FIELD: byte p062
	+++  NEW FIELD: byte p183
	+++  NEW FIELD: byte p058
	+++  NEW FIELD: byte p179
	+++  NEW FIELD: byte p057
	+++  NEW FIELD: byte p178
	+++  NEW FIELD: byte p056
	+++  NEW FIELD: byte p177
	+++  NEW FIELD: byte p055
	+++  NEW FIELD: byte p176
	+++  NEW FIELD: byte p059
	+++  NEW FIELD: byte p050
	+++  NEW FIELD: byte p171
	+++  NEW FIELD: byte p170
	+++  NEW FIELD: byte p054
	+++  NEW FIELD: byte p175
	+++  NEW FIELD: byte p053
	+++  NEW FIELD: byte p174
	+++  NEW FIELD: byte p052
	+++  NEW FIELD: byte p173
	+++  NEW FIELD: byte p051
	+++  NEW FIELD: byte p172
	+++  NEW FIELD: byte p047
	+++  NEW FIELD: byte p168
	+++  NEW FIELD: byte p046
	+++  NEW FIELD: byte p167
	+++  NEW FIELD: byte p045
	+++  NEW FIELD: byte p166
	+++  NEW FIELD: byte p044
	+++  NEW FIELD: byte p165
	+++  NEW FIELD: byte p049
	+++  NEW FIELD: byte p048
	+++  NEW FIELD: byte p169
	+++  NEW FIELD: byte p083
	+++  NEW FIELD: byte p082
	+++  NEW FIELD: byte p081
	+++  NEW FIELD: byte p080
	+++  NEW FIELD: byte p087
	+++  NEW FIELD: byte p086
	+++  NEW FIELD: byte p085
	+++  NEW FIELD: byte p084
	+++  NEW FIELD: byte p079
	+++  NEW FIELD: byte p078
	+++  NEW FIELD: byte p199
	+++  NEW FIELD: byte p077
	+++  NEW FIELD: byte p198
	+++  NEW FIELD: byte p072
	+++  NEW FIELD: byte p193
	+++  NEW FIELD: byte p071
	+++  NEW FIELD: byte p192
	+++  NEW FIELD: byte p070
	+++  NEW FIELD: byte p191
	+++  NEW FIELD: byte p190
	+++  NEW FIELD: byte p076
	+++  NEW FIELD: byte p197
	+++  NEW FIELD: byte p075
	+++  NEW FIELD: byte p196
	+++  NEW FIELD: byte p074
	+++  NEW FIELD: byte p195
	+++  NEW FIELD: byte p073
	+++  NEW FIELD: byte p194
	+++  NEW FIELD: byte p069
	+++  NEW FIELD: byte p068
	+++  NEW FIELD: byte p189
	+++  NEW FIELD: byte p067
	+++  NEW FIELD: byte p188
	+++  NEW FIELD: byte p066
	+++  NEW FIELD: byte p187
	+++  NEW FIELD: byte p099
	+++  NEW FIELD: byte p090
	+++  NEW FIELD: byte p094
	+++  NEW FIELD: byte p093
	+++  NEW FIELD: byte p092
	+++  NEW FIELD: byte p091
	+++  NEW FIELD: byte p098
	+++  NEW FIELD: byte p097
	+++  NEW FIELD: byte p096
	+++  NEW FIELD: byte p095
	+++  NEW FIELD: byte p089
	+++  NEW FIELD: byte p088
	+++  NEW FIELD: org.openjdk.jmh.infra.IterationParams iterationParams
	+++  NEW FIELD: byte p212
	+++  NEW FIELD: byte p211
	+++  NEW FIELD: byte p210
	+++  NEW FIELD: byte p216
	+++  NEW FIELD: byte p215
	+++  NEW FIELD: byte p214
	+++  NEW FIELD: byte p213
	+++  NEW FIELD: byte p219
	+++  NEW FIELD: byte p218
	+++  NEW FIELD: byte p217
	+++  NEW FIELD: org.openjdk.jmh.infra.ThreadParams threadParams
	+++  NEW FIELD: org.openjdk.jmh.infra.Control notifyControl
	+++  NEW FIELD: byte p201
	+++  NEW FIELD: byte p200
	+++  NEW FIELD: byte p205
	+++  NEW FIELD: byte p204
	+++  NEW FIELD: byte p203
	+++  NEW FIELD: byte p202
	+++  NEW FIELD: byte p209
	+++  NEW FIELD: byte p208
	+++  NEW FIELD: byte p207
	+++  NEW FIELD: byte p206
	+++  NEW FIELD: STATIC(+) VOLATILE(+) org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType f_benchmarkdeterministicindexedtable0_G
	+++  NEW FIELD: byte p120
	+++  NEW FIELD: byte p241
	+++  NEW FIELD: byte p240
	+++  NEW FIELD: byte p113
	+++  NEW FIELD: byte p234
	+++  NEW FIELD: byte p112
	+++  NEW FIELD: byte p233
	+++  NEW FIELD: byte p111
	+++  NEW FIELD: byte p232
	+++  NEW FIELD: byte p110
	+++  NEW FIELD: byte p231
	+++  NEW FIELD: byte p117
	+++  NEW FIELD: byte p238
	+++  NEW FIELD: byte p116
	+++  NEW FIELD: byte p237
	+++  NEW FIELD: byte p115
	+++  NEW FIELD: byte p236
	+++  NEW FIELD: byte p114
	+++  NEW FIELD: byte p235
	+++  NEW FIELD: byte p119
	+++  NEW FIELD: byte p118
	+++  NEW FIELD: byte p239
	+++  NEW FIELD: byte p230
	+++  NEW FIELD: byte p102
	+++  NEW FIELD: byte p223
	+++  NEW FIELD: byte p101
	+++  NEW FIELD: byte p222
	+++  NEW FIELD: byte p100
	+++  NEW FIELD: byte p221
	+++  NEW FIELD: byte p220
	+++  NEW FIELD: byte p106
	+++  NEW FIELD: byte p227
	+++  NEW FIELD: byte p105
	+++  NEW FIELD: byte p226
	+++  NEW FIELD: byte p104
	+++  NEW FIELD: byte p225
	+++  NEW FIELD: byte p103
	+++  NEW FIELD: byte p224
	+++  NEW FIELD: byte p109
	+++  NEW FIELD: byte p108
	+++  NEW FIELD: byte p229
	+++  NEW FIELD: byte p107
	+++  NEW FIELD: byte p228
	+++  NEW FIELD: org.openjdk.jmh.infra.BenchmarkParams benchmarkParams
	+++  NEW FIELD: byte p021
	+++  NEW FIELD: byte p142
	+++  NEW FIELD: byte p020
	+++  NEW FIELD: byte p141
	+++  NEW FIELD: byte p140
	+++  NEW FIELD: byte p014
	+++  NEW FIELD: byte p135
	+++  NEW FIELD: byte p013
	+++  NEW FIELD: byte p134
	+++  NEW FIELD: byte p255
	+++  NEW FIELD: byte p012
	+++  NEW FIELD: byte p133
	+++  NEW FIELD: byte p254
	+++  NEW FIELD: byte p011
	+++  NEW FIELD: byte p132
	+++  NEW FIELD: byte p253
	+++  NEW FIELD: byte p018
	+++  NEW FIELD: byte p139
	+++  NEW FIELD: byte p017
	+++  NEW FIELD: byte p138
	+++  NEW FIELD: byte p016
	+++  NEW FIELD: byte p137
	+++  NEW FIELD: byte p015
	+++  NEW FIELD: byte p136
	+++  NEW FIELD: byte p019
	+++  NEW FIELD: byte p010
	+++  NEW FIELD: byte p131
	+++  NEW FIELD: byte p252
	+++  NEW FIELD: byte p130
	+++  NEW FIELD: byte p251
	+++  NEW FIELD: byte p250
	+++  NEW FIELD: byte p003
	+++  NEW FIELD: byte p124
	+++  NEW FIELD: byte p245
	+++  NEW FIELD: byte p002
	+++  NEW FIELD: byte p123
	+++  NEW FIELD: byte p244
	+++  NEW FIELD: byte p001
	+++  NEW FIELD: byte p122
	+++  NEW FIELD: byte p243
	+++  NEW FIELD: byte p000
	+++  NEW FIELD: byte p121
	+++  NEW FIELD: byte p242
	+++  NEW FIELD: byte p007
	+++  NEW FIELD: byte p128
	+++  NEW FIELD: byte p249
	+++  NEW FIELD: byte p006
	+++  NEW FIELD: byte p127
	+++  NEW FIELD: byte p248
	+++  NEW FIELD: byte p005
	+++  NEW FIELD: byte p126
	+++  NEW FIELD: byte p247
	+++  NEW FIELD: byte p004
	+++  NEW FIELD: byte p125
	+++  NEW FIELD: byte p246
	+++  NEW FIELD: byte p009
	+++  NEW FIELD: byte p008
	+++  NEW FIELD: byte p129
	+++  NEW CONSTRUCTOR: PUBLIC(+) BenchmarkDeterministicIndexedTable_simpleIndexedTable_jmhTest()
	+++  NEW METHOD: org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType _jmh_tryInit_f_benchmarkdeterministicindexedtable0_G(org.openjdk.jmh.runner.InfraControl)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult simpleIndexedTable_AverageTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void simpleIndexedTable_avgt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void simpleIndexedTable_sample_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.openjdk.jmh.util.SampleBuffer, int, long, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult simpleIndexedTable_SampleTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult simpleIndexedTable_SingleShotTime(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void simpleIndexedTable_ss_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) org.openjdk.jmh.results.BenchmarkTaskResult simpleIndexedTable_Throughput(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.infra.ThreadParams)
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void simpleIndexedTable_thrpt_jmhStub(org.openjdk.jmh.runner.InfraControl, org.openjdk.jmh.results.RawResults, org.openjdk.jmh.infra.BenchmarkParams, org.openjdk.jmh.infra.IterationParams, org.openjdk.jmh.infra.ThreadParams, org.openjdk.jmh.infra.Blackhole, org.openjdk.jmh.infra.Control, int, org.apache.pinot.perf.jmh_generated.BenchmarkDeterministicIndexedTable_jmhType)
		+++  NEW EXCEPTION: java.lang.Throwable

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-protobuf-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-protobuf-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-pulsar-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-pulsar-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-query-planner-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-query-planner-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***  MODIFIED CLASS: PUBLIC FINAL org.apache.pinot.query.planner.logical.RelToPlanNodeConverter  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.query.planner.plannode.JoinNode convertLogicalAsofJoin(org.apache.calcite.rel.logical.LogicalAsofJoin)
---! REMOVED CLASS: org.apache.pinot.query.planner.physical.colocated.ColocationKey  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---  REMOVED FIELD: PRIVATE(-) int _numPartitions
	---  REMOVED FIELD: PRIVATE(-) java.util.List<java.lang.Integer> _indices
	---  REMOVED FIELD: PRIVATE(-) java.lang.String _hashAlgorithm
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ColocationKey(int, java.lang.String)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ColocationKey(int, int, java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) void addIndex(int)
	---! REMOVED METHOD: PUBLIC(-) boolean equals(java.lang.Object)
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getHashAlgorithm()
	---! REMOVED METHOD: PUBLIC(-) java.util.List<java.lang.Integer> getIndices()
	---! REMOVED METHOD: PUBLIC(-) int getNumPartitions()
	---! REMOVED METHOD: PUBLIC(-) int hashCode()
---! REMOVED CLASS: org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Set<java.lang.Integer> _joinStages
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Map<java.lang.Integer,java.util.List<org.apache.pinot.query.planner.plannode.PlanNode>> _leafNodes
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Set<java.lang.Integer> _setOpStages
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Map<java.lang.Integer,org.apache.pinot.query.planner.plannode.PlanNode> _rootPlanNode
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Map<java.lang.Integer,java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey>> _senderInputColocationKeys
	---! REMOVED CONSTRUCTOR: GreedyShuffleRewriteContext()
	---! REMOVED METHOD: void addLeafNode(java.lang.Integer, org.apache.pinot.query.planner.plannode.PlanNode)
	---! REMOVED METHOD: java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> getColocationKeys(java.lang.Integer)
	---! REMOVED METHOD: java.util.List<org.apache.pinot.query.planner.plannode.PlanNode> getLeafNodes(java.lang.Integer)
	---! REMOVED METHOD: org.apache.pinot.query.planner.plannode.PlanNode getRootPlanNode(java.lang.Integer)
	---! REMOVED METHOD: boolean isJoinStage(java.lang.Integer)
	---! REMOVED METHOD: boolean isSetOpStage(java.lang.Integer)
	---! REMOVED METHOD: void markJoinStage(java.lang.Integer)
	---! REMOVED METHOD: void markSetOpStage(java.lang.Integer)
	---! REMOVED METHOD: void setColocationKeys(java.lang.Integer, java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey>)
	---! REMOVED METHOD: void setRootPlanNode(java.lang.Integer, org.apache.pinot.query.planner.plannode.PlanNode)
---! REMOVED CLASS: org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewritePreComputeVisitor  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED INTERFACE: org.apache.pinot.query.planner.plannode.PlanNodeVisitor
	---! REMOVED SUPERCLASS: org.apache.pinot.query.planner.plannode.DefaultPostOrderTraversalVisitor
	---! REMOVED CONSTRUCTOR: GreedyShuffleRewritePreComputeVisitor()
	---! REMOVED METHOD: STATIC(-) org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext preComputeContext(org.apache.pinot.query.planner.plannode.PlanNode)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Integer process(org.apache.pinot.query.planner.plannode.PlanNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Integer visitJoin(org.apache.pinot.query.planner.plannode.JoinNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Integer visitMailboxReceive(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Integer visitSetOp(org.apache.pinot.query.planner.plannode.SetOpNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Integer visitTableScan(org.apache.pinot.query.planner.plannode.TableScanNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteVisitor  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED INTERFACE: org.apache.pinot.query.planner.plannode.PlanNodeVisitor
	---! REMOVED SUPERCLASS: java.lang.Object
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Map<java.lang.Integer,org.apache.pinot.query.planner.physical.DispatchablePlanMetadata> _dispatchablePlanMetadataMap
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) org.slf4j.Logger LOGGER
	---  REMOVED FIELD: PRIVATE(-) boolean _canSkipShuffleForJoin
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.common.config.provider.TableCache _tableCache
	---  REMOVED CONSTRUCTOR: PRIVATE(-) GreedyShuffleRewriteVisitor(org.apache.pinot.common.config.provider.TableCache, java.util.Map<java.lang.Integer,org.apache.pinot.query.planner.physical.DispatchablePlanMetadata>)
	---  REMOVED METHOD: PRIVATE(-) boolean allAreSuperSet(java.lang.Iterable<java.lang.Integer>, org.apache.pinot.query.planner.plannode.MailboxSendNode)
	---  REMOVED METHOD: PRIVATE(-) boolean areServersSuperset(int, int)
	---  REMOVED METHOD: PRIVATE(-) boolean canJoinBeColocated(org.apache.pinot.query.planner.plannode.JoinNode)
	---  REMOVED METHOD: PRIVATE(-) boolean canServerAssignmentAllowShuffleSkip(int, int, int)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) boolean checkPartitionScheme(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) boolean colocationKeyCondition(java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey>, java.util.List<java.lang.Integer>)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> computeNewColocationKeys(java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey>, java.util.Map<java.lang.Integer,java.lang.Integer>)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) org.apache.pinot.query.planner.physical.colocated.ColocationKey getEquivalentSenderKey(java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey>, java.util.List<java.lang.Integer>)
	---  REMOVED METHOD: PRIVATE(-) boolean noneIsJoin(java.lang.Iterable<java.lang.Integer>, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) void optimizeShuffles(org.apache.pinot.query.planner.plannode.PlanNode, java.util.Map<java.lang.Integer,org.apache.pinot.query.planner.physical.DispatchablePlanMetadata>, org.apache.pinot.common.config.provider.TableCache)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) boolean partitionKeyConditionForJoin(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.planner.plannode.MailboxSendNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitAggregate(org.apache.pinot.query.planner.plannode.AggregateNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitExchange(org.apache.pinot.query.planner.plannode.ExchangeNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitExplained(org.apache.pinot.query.planner.plannode.ExplainedNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitFilter(org.apache.pinot.query.planner.plannode.FilterNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitJoin(org.apache.pinot.query.planner.plannode.JoinNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitMailboxReceive(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitMailboxSend(org.apache.pinot.query.planner.plannode.MailboxSendNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitProject(org.apache.pinot.query.planner.plannode.ProjectNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitSetOp(org.apache.pinot.query.planner.plannode.SetOpNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitSort(org.apache.pinot.query.planner.plannode.SortNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitTableScan(org.apache.pinot.query.planner.plannode.TableScanNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitValue(org.apache.pinot.query.planner.plannode.ValueNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<org.apache.pinot.query.planner.physical.colocated.ColocationKey> visitWindow(org.apache.pinot.query.planner.plannode.WindowNode, org.apache.pinot.query.planner.physical.colocated.GreedyShuffleRewriteContext)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.planner.physical.DispatchablePlanMetadata  (default serialVersionUID changed)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> _workerIdToTableSegmentsMap
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.query.routing.table.LogicalTableRouteInfo _logicalTableRouteInfo
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.query.routing.table.LogicalTableRouteInfo getLogicalTableRouteInfo()
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> getWorkerIdToTableSegmentsMap()
	+++  NEW METHOD: PUBLIC(+) void setLogicalTableRouteInfo(org.apache.pinot.query.routing.table.LogicalTableRouteInfo)
	+++  NEW METHOD: PUBLIC(+) void setWorkerIdToTableSegmentsMap(java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.util.List<java.lang.String>>>)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.planner.physical.PinotDispatchPlanner  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) void runPhysicalOptimizers(org.apache.pinot.query.planner.plannode.PlanNode, org.apache.pinot.query.planner.physical.DispatchablePlanContext, org.apache.pinot.common.config.provider.TableCache)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.planner.plannode.JoinNode  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.query.planner.logical.RexExpression _matchCondition
	+++  NEW CONSTRUCTOR: PUBLIC(+) JoinNode(int, org.apache.pinot.common.utils.DataSchema, org.apache.pinot.query.planner.plannode.PlanNode$NodeHint, java.util.List<org.apache.pinot.query.planner.plannode.PlanNode>, org.apache.calcite.rel.core.JoinRelType, java.util.List<java.lang.Integer>, java.util.List<java.lang.Integer>, java.util.List<org.apache.pinot.query.planner.logical.RexExpression>, org.apache.pinot.query.planner.plannode.JoinNode$JoinStrategy, org.apache.pinot.query.planner.logical.RexExpression)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.query.planner.logical.RexExpression getMatchCondition()
***  MODIFIED ENUM: PUBLIC STATIC FINAL org.apache.pinot.query.planner.plannode.JoinNode$JoinStrategy  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.planner.plannode.JoinNode$JoinStrategy ASOF
***! MODIFIED CLASS: PUBLIC org.apache.pinot.query.routing.table.ImplicitHybridTableRouteProvider  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) void fillRouteMetadata(org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo, org.apache.pinot.core.routing.RoutingManager)
	+++  NEW METHOD: PUBLIC(+) void fillTableConfigMetadata(org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo, java.lang.String, org.apache.pinot.common.config.provider.TableCache)
	***! MODIFIED METHOD: PUBLIC org.apache.pinot.core.transport.TableRouteInfo (<-org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo) getTableRouteInfo(java.lang.String, org.apache.pinot.common.config.provider.TableCache, org.apache.pinot.core.routing.RoutingManager)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.query.routing.table.LogicalTableRouteInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.spi.data.LogicalTableConfig _logicalTable
	===* UNCHANGED FIELD: PRIVATE java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>) _realtimeTables
	===* UNCHANGED FIELD: PRIVATE java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>) _offlineTables
	+++  NEW FIELD: PRIVATE(+) java.lang.String _logicalTableName
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategy _timeBoundaryStrategy
	---! REMOVED CONSTRUCTOR: PUBLIC(-) LogicalTableRouteInfo(org.apache.pinot.spi.data.LogicalTableConfig)
	***  MODIFIED CONSTRUCTOR: PUBLIC (<- PACKAGE_PROTECTED) LogicalTableRouteInfo()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getLogicalTableName()
	===* UNCHANGED METHOD: PUBLIC java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>) getOfflineTables()
	===* UNCHANGED METHOD: PUBLIC java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>) getRealtimeTables()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategy getTimeBoundaryStrategy()
	+++  NEW METHOD: PUBLIC(+) void setLogicalTableName(java.lang.String)
	===* UNCHANGED METHOD: PUBLIC void setOfflineTables(java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>))
	===* UNCHANGED METHOD: PUBLIC void setRealtimeTables(java.util.List<org.apache.pinot.core.transport.ImplicitHybridTableRouteInfo>(<- <org.apache.pinot.core.transport.TableRouteInfo>))
	+++  NEW METHOD: PUBLIC(+) void setTimeBoundaryStrategy(org.apache.pinot.query.timeboundary.TimeBoundaryStrategy)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.routing.table.LogicalTableRouteProvider  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) void fillRouteMetadata(org.apache.pinot.query.routing.table.LogicalTableRouteInfo, org.apache.pinot.core.routing.RoutingManager)
	+++  NEW METHOD: PUBLIC(+) void fillTableConfigMetadata(org.apache.pinot.query.routing.table.LogicalTableRouteInfo, java.lang.String, org.apache.pinot.common.config.provider.TableCache)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.routing.WorkerManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PRIVATE(+) STATIC(+) void assignTableSegmentsToWorkers(org.apache.pinot.query.routing.table.LogicalTableRouteInfo, org.apache.pinot.query.planner.physical.DispatchablePlanMetadata)
	+++  NEW METHOD: PRIVATE(+) void assignWorkersToNonPartitionedLeafFragmentForLogicalTable(org.apache.pinot.query.planner.physical.DispatchablePlanMetadata, org.apache.pinot.query.planner.physical.DispatchablePlanContext)
	+++  NEW METHOD: PRIVATE(+) STATIC(+) void transferToServerInstanceLogicalSegmentsMap(java.lang.String, java.util.Map<org.apache.pinot.core.transport.ServerInstance,org.apache.pinot.core.routing.ServerRouteInfo>, java.util.Map<org.apache.pinot.core.transport.ServerInstance,java.util.Map<java.lang.String,java.util.List<java.lang.String>>>)
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) void verifyCompatibility(org.apache.pinot.core.routing.TablePartitionInfo, org.apache.pinot.core.routing.TablePartitionInfo)
		---  REMOVED EXCEPTION: java.lang.IllegalArgumentException
	+++  NEW METHOD: PRIVATE(+) STATIC(+) void verifyCompatibility(org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo, org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo)
		+++  NEW EXCEPTION: java.lang.IllegalArgumentException
***! MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.query.routing.WorkerManager$PartitionTableInfo  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: STATIC(-) org.apache.pinot.query.routing.WorkerManager$PartitionTableInfo fromTablePartitionInfo(org.apache.pinot.core.routing.TablePartitionInfo, org.apache.pinot.spi.config.table.TableType)
	+++  NEW METHOD: STATIC(+) org.apache.pinot.query.routing.WorkerManager$PartitionTableInfo fromTablePartitionInfo(org.apache.pinot.core.routing.TablePartitionReplicatedServersInfo, org.apache.pinot.spi.config.table.TableType)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.routing.WorkerMetadata  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String LOGICAL_TABLE_SEGMENTS_MAP_KEY
	+++  NEW METHOD: PRIVATE(+) java.util.Map<java.lang.String,java.util.List<java.lang.String>> deserializeStringSegmentListMap(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.String,java.util.List<java.lang.String>> getLogicalTableSegmentsMap()
	+++  NEW METHOD: PUBLIC(+) void setLogicalTableSegmentsMap(java.util.Map<java.lang.String,java.util.List<java.lang.String>>)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.query.timeboundary.MinTimeBoundaryStrategy  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: org.apache.pinot.query.timeboundary.TimeBoundaryStrategy
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) java.lang.String INCLUDED_TABLES
	+++  NEW FIELD: java.util.Map<java.lang.String,org.apache.pinot.spi.data.DateTimeFormatSpec> _dateTimeFormatSpecMap
	+++  NEW CONSTRUCTOR: PUBLIC(+) MinTimeBoundaryStrategy()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.routing.TimeBoundaryInfo computeTimeBoundary(org.apache.pinot.core.routing.RoutingManager)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) java.util.List<java.lang.String> getTimeBoundaryTableNames(org.apache.pinot.spi.data.LogicalTableConfig)
	+++  NEW METHOD: PUBLIC(+) void init(org.apache.pinot.spi.data.LogicalTableConfig, org.apache.pinot.common.config.provider.TableCache)
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategy  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.core.routing.TimeBoundaryInfo computeTimeBoundary(org.apache.pinot.core.routing.RoutingManager)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<java.lang.String> getTimeBoundaryTableNames(org.apache.pinot.spi.data.LogicalTableConfig)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) void init(org.apache.pinot.spi.data.LogicalTableConfig, org.apache.pinot.common.config.provider.TableCache)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategyService  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.Map<java.lang.String,org.apache.pinot.query.timeboundary.TimeBoundaryStrategy> _strategyMap
	+++  NEW FIELD: PRIVATE(+) STATIC(+) VOLATILE(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategyService _instance
	+++  NEW CONSTRUCTOR: PRIVATE(+) TimeBoundaryStrategyService(java.util.Map<java.lang.String,org.apache.pinot.query.timeboundary.TimeBoundaryStrategy>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategyService fromServiceLoader()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategyService getInstance()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.query.timeboundary.TimeBoundaryStrategy getTimeBoundaryStrategy(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void setInstance(org.apache.pinot.query.timeboundary.TimeBoundaryStrategyService)

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-query-runtime-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-query-runtime-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***! MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.InStageStatsTreeBuilder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) com.fasterxml.jackson.databind.node.ObjectNode recursiveCase(org.apache.pinot.query.planner.plannode.BasePlanNode, org.apache.pinot.query.runtime.operator.MultiStageOperator$Type)
	+++  NEW METHOD: PRIVATE(+) com.fasterxml.jackson.databind.node.ObjectNode recursiveCase(org.apache.pinot.query.planner.plannode.BasePlanNode, org.apache.pinot.query.runtime.operator.MultiStageOperator$Type, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---  REMOVED METHOD: PRIVATE(-) com.fasterxml.jackson.databind.node.ObjectNode selfNode(org.apache.pinot.query.runtime.operator.MultiStageOperator$Type)
	+++  NEW METHOD: PRIVATE(+) com.fasterxml.jackson.databind.node.ObjectNode selfNode(org.apache.pinot.query.runtime.operator.MultiStageOperator$Type, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitAggregate(org.apache.pinot.query.planner.plannode.AggregateNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitAggregate(org.apache.pinot.query.planner.plannode.AggregateNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitExchange(org.apache.pinot.query.planner.plannode.ExchangeNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitExchange(org.apache.pinot.query.planner.plannode.ExchangeNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitExplained(org.apache.pinot.query.planner.plannode.ExplainedNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitExplained(org.apache.pinot.query.planner.plannode.ExplainedNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitFilter(org.apache.pinot.query.planner.plannode.FilterNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitFilter(org.apache.pinot.query.planner.plannode.FilterNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitJoin(org.apache.pinot.query.planner.plannode.JoinNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitJoin(org.apache.pinot.query.planner.plannode.JoinNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitMailboxReceive(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitMailboxReceive(org.apache.pinot.query.planner.plannode.MailboxReceiveNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitMailboxSend(org.apache.pinot.query.planner.plannode.MailboxSendNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitMailboxSend(org.apache.pinot.query.planner.plannode.MailboxSendNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitProject(org.apache.pinot.query.planner.plannode.ProjectNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitProject(org.apache.pinot.query.planner.plannode.ProjectNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitSetOp(org.apache.pinot.query.planner.plannode.SetOpNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitSetOp(org.apache.pinot.query.planner.plannode.SetOpNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitSort(org.apache.pinot.query.planner.plannode.SortNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitSort(org.apache.pinot.query.planner.plannode.SortNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitTableScan(org.apache.pinot.query.planner.plannode.TableScanNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitTableScan(org.apache.pinot.query.planner.plannode.TableScanNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitValue(org.apache.pinot.query.planner.plannode.ValueNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitValue(org.apache.pinot.query.planner.plannode.ValueNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
	---! REMOVED METHOD: PUBLIC(-) com.fasterxml.jackson.databind.node.ObjectNode visitWindow(org.apache.pinot.query.planner.plannode.WindowNode, java.lang.Void)
	+++  NEW METHOD: PUBLIC(+) com.fasterxml.jackson.databind.node.ObjectNode visitWindow(org.apache.pinot.query.planner.plannode.WindowNode, org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context)
+++  NEW CLASS: PUBLIC(+) STATIC(+) org.apache.pinot.query.runtime.InStageStatsTreeBuilder$Context  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PRIVATE(+) FINAL(+) int _parallelism
	+++  NEW CONSTRUCTOR: PUBLIC(+) InStageStatsTreeBuilder$Context(int)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.query.runtime.operator.BaseJoinOperator
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType _matchConditionType
	+++  NEW FIELD: PRIVATE(+) FINAL(+) int _leftMatchKeyIndex
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.query.planner.partitioning.KeySelector<?> _leftKeySelector
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.pinot.query.planner.partitioning.KeySelector<?> _rightKeySelector
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.Map<java.lang.Object,java.util.NavigableMap<java.lang.Comparable<?>,java.lang.Object[]>> _rightTable
	+++  NEW FIELD: PRIVATE(+) FINAL(+) int _rightMatchKeyIndex
	+++  NEW FIELD: PRIVATE(+) STATIC(+) FINAL(+) java.lang.String EXPLAIN_NAME
	+++  NEW CONSTRUCTOR: PUBLIC(+) AsofJoinOperator(org.apache.pinot.query.runtime.plan.OpChainExecutionContext, org.apache.pinot.query.runtime.operator.MultiStageOperator, org.apache.pinot.common.utils.DataSchema, org.apache.pinot.query.runtime.operator.MultiStageOperator, org.apache.pinot.query.planner.plannode.JoinNode)
	+++  NEW METHOD: PROTECTED(+) void addRowsToRightTable(java.util.List<java.lang.Object[]>)
	+++  NEW METHOD: PROTECTED(+) java.util.List<java.lang.Object[]> buildJoinedRows(org.apache.pinot.query.runtime.blocks.MseBlock$Data)
	+++  NEW METHOD: PROTECTED(+) java.util.List<java.lang.Object[]> buildNonMatchRightRows()
	+++  NEW METHOD: PRIVATE(+) java.lang.Object[] closestMatch(java.lang.Comparable<?>, java.util.NavigableMap<java.lang.Comparable<?>,java.lang.Object[]>)
	+++  NEW METHOD: PROTECTED(+) void finishBuildingRightTable()
	+++  NEW METHOD: PUBLIC(+) java.lang.String toExplainString()
+++  NEW ENUM: PRIVATE(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType  (compatible)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: java.lang.constant.Constable
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: java.lang.Enum
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType GREATER_THAN_OR_EQUAL
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType GREATER_THAN
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType LESS_THAN_OR_EQUAL
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType LESS_THAN
	+++  NEW CONSTRUCTOR: PRIVATE(+) AsofJoinOperator$MatchConditionType(java.lang.String, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.query.runtime.operator.AsofJoinOperator$MatchConditionType[] values()
**** MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.query.runtime.operator.BaseJoinOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PROTECTED(+) ABSTRACT(+) void addRowsToRightTable(java.util.List<java.lang.Object[]>)
	***  MODIFIED METHOD: PROTECTED NON_ABSTRACT (<- ABSTRACT) void buildRightTable()
	+++* NEW METHOD: PROTECTED(+) ABSTRACT(+) void finishBuildingRightTable()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.HashJoinOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PROTECTED(+) void addRowsToRightTable(java.util.List<java.lang.Object[]>)
	---  REMOVED METHOD: PROTECTED(-) void buildRightTable()
	+++  NEW METHOD: PROTECTED(+) void finishBuildingRightTable()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.join.DoubleLookupTable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED SUPERCLASS: org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable (<- org.apache.pinot.query.runtime.operator.join.LookupTable)
	---  REMOVED METHOD: PUBLIC(-) void addRow(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) void addRowNotNullKey(java.lang.Object, java.lang.Object[])
	---  REMOVED METHOD: PUBLIC(-) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) boolean containsNotNullKey(java.lang.Object)
	---  REMOVED METHOD: PUBLIC(-) java.util.Set<java.util.Map$Entry> entrySet()
	---  REMOVED METHOD: PUBLIC(-) void finish()
	+++  NEW METHOD: PUBLIC(+) void finishNotNullKey()
	---  REMOVED METHOD: PUBLIC(-) java.lang.Object lookup(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object lookupNotNullKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> notNullKeyEntrySet()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.join.FloatLookupTable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED SUPERCLASS: org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable (<- org.apache.pinot.query.runtime.operator.join.LookupTable)
	---  REMOVED METHOD: PUBLIC(-) void addRow(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) void addRowNotNullKey(java.lang.Object, java.lang.Object[])
	---  REMOVED METHOD: PUBLIC(-) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) boolean containsNotNullKey(java.lang.Object)
	---  REMOVED METHOD: PUBLIC(-) java.util.Set<java.util.Map$Entry> entrySet()
	---  REMOVED METHOD: PUBLIC(-) void finish()
	+++  NEW METHOD: PUBLIC(+) void finishNotNullKey()
	---  REMOVED METHOD: PUBLIC(-) java.lang.Object lookup(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object lookupNotNullKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> notNullKeyEntrySet()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.join.IntLookupTable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED SUPERCLASS: org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable (<- org.apache.pinot.query.runtime.operator.join.LookupTable)
	---  REMOVED METHOD: PUBLIC(-) void addRow(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PROTECTED(+) void addRowNotNullKey(java.lang.Object, java.lang.Object[])
	---  REMOVED METHOD: PUBLIC(-) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) boolean containsNotNullKey(java.lang.Object)
	---  REMOVED METHOD: PUBLIC(-) java.util.Set<java.util.Map$Entry> entrySet()
	---  REMOVED METHOD: PUBLIC(-) void finish()
	+++  NEW METHOD: PROTECTED(+) void finishNotNullKey()
	---  REMOVED METHOD: PUBLIC(-) java.lang.Object lookup(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) java.lang.Object lookupNotNullKey(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> notNullKeyEntrySet()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.join.LongLookupTable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED SUPERCLASS: org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable (<- org.apache.pinot.query.runtime.operator.join.LookupTable)
	---  REMOVED METHOD: PUBLIC(-) void addRow(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) void addRowNotNullKey(java.lang.Object, java.lang.Object[])
	---  REMOVED METHOD: PUBLIC(-) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) boolean containsNotNullKey(java.lang.Object)
	---  REMOVED METHOD: PUBLIC(-) java.util.Set<java.util.Map$Entry> entrySet()
	---  REMOVED METHOD: PUBLIC(-) void finish()
	+++  NEW METHOD: PUBLIC(+) void finishNotNullKey()
	---  REMOVED METHOD: PUBLIC(-) java.lang.Object lookup(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object lookupNotNullKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> notNullKeyEntrySet()
***  MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.query.runtime.operator.join.LookupTable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PROTECTED(+) STATIC(+) java.lang.Object convertValueToList(java.lang.Object)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: org.apache.pinot.query.runtime.operator.join.LookupTable
	+++  NEW FIELD: PRIVATE(+) java.lang.Object _valueForNullKey
	+++  NEW CONSTRUCTOR: PUBLIC(+) PrimitiveLookupTable()
	+++  NEW METHOD: PUBLIC(+) void addRow(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PROTECTED(+) ABSTRACT(+) void addRowNotNullKey(java.lang.Object, java.lang.Object[])
	+++  NEW METHOD: PUBLIC(+) boolean containsKey(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) ABSTRACT(+) boolean containsNotNullKey(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> entrySet()
	+++  NEW METHOD: PUBLIC(+) void finish()
	+++  NEW METHOD: PROTECTED(+) ABSTRACT(+) void finishNotNullKey()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object lookup(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) ABSTRACT(+) java.lang.Object lookupNotNullKey(java.lang.Object)
	+++  NEW METHOD: PROTECTED(+) ABSTRACT(+) java.util.Set<java.util.Map$Entry<java.lang.Object,java.lang.Object>> notNullKeyEntrySet()
+++  NEW CLASS: org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable$1  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: java.util.Map$Entry
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PrimitiveLookupTable$1(org.apache.pinot.query.runtime.operator.join.PrimitiveLookupTable)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object getKey()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object getValue()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object setValue(java.lang.Object)
***  MODIFIED ENUM: PUBLIC STATIC org.apache.pinot.query.runtime.operator.LeafOperator$StatKey  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.LeafOperator$StatKey THREAD_MEM_ALLOCATED_BYTES
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.pinot.query.runtime.operator.LeafOperator$StatKey RESPONSE_SER_MEM_ALLOCATED_BYTES
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.operator.NonEquiJoinOperator  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PROTECTED(+) void addRowsToRightTable(java.util.List<java.lang.Object[]>)
	---  REMOVED METHOD: PROTECTED(-) void buildRightTable()
	+++  NEW METHOD: PROTECTED(+) void finishBuildingRightTable()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.plan.server.ServerPlanRequestUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) org.apache.pinot.common.request.InstanceRequest compileInstanceRequest(org.apache.pinot.query.runtime.plan.OpChainExecutionContext, org.apache.pinot.common.request.PinotQuery, org.apache.pinot.core.routing.TimeBoundaryInfo, org.apache.pinot.spi.config.table.TableType, java.util.List<java.lang.String>, org.apache.pinot.segment.local.data.manager.TableDataManager)
	+++  NEW METHOD: PRIVATE(+) STATIC(+) org.apache.pinot.common.request.InstanceRequest compileInstanceRequest(org.apache.pinot.query.runtime.plan.OpChainExecutionContext, org.apache.pinot.common.request.PinotQuery, org.apache.pinot.core.routing.TimeBoundaryInfo, org.apache.pinot.spi.config.table.TableType, java.lang.String, org.apache.pinot.spi.config.table.TableConfig, org.apache.pinot.spi.data.Schema, java.util.List<java.lang.String>, java.util.List<org.apache.pinot.common.request.TableSegmentsInfo>)
	+++  NEW METHOD: PRIVATE(+) STATIC(+) java.util.List<org.apache.pinot.common.request.InstanceRequest> constructLogicalTableServerQueryRequests(org.apache.pinot.query.runtime.plan.OpChainExecutionContext, org.apache.pinot.common.request.PinotQuery, org.apache.pinot.core.data.manager.InstanceDataManager)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.query.runtime.QueryRunner  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) java.util.concurrent.ExecutorService getExecutorService()
	+++  NEW METHOD: PRIVATE(+) void notifyErrorAfterSubmission(int, org.apache.pinot.query.runtime.blocks.ErrorMseBlock, long, org.apache.pinot.query.routing.WorkerMetadata, org.apache.pinot.query.routing.StagePlan, long)
	***! MODIFIED METHOD: PUBLIC java.util.concurrent.CompletableFuture<java.lang.Void> (<-void<java.lang.Void>) processQuery(org.apache.pinot.query.routing.WorkerMetadata, org.apache.pinot.query.routing.StagePlan, java.util.Map<java.lang.String,java.lang.String><java.lang.String,java.lang.String>, org.apache.pinot.spi.accounting.ThreadExecutionContext)
	+++  NEW METHOD: PRIVATE(+) void processQueryBlocking(org.apache.pinot.query.routing.WorkerMetadata, org.apache.pinot.query.routing.StagePlan, java.util.Map<java.lang.String,java.lang.String>, org.apache.pinot.spi.accounting.ThreadExecutionContext)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.query.service.server.QueryServer  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.concurrent.ExecutorService _querySubmissionExecutorService
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.concurrent.ExecutorService _timeSeriesExecutorService
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.concurrent.ExecutorService _explainExecutorService
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.concurrent.ExecutorService _submissionExecutorService
	+++  NEW METHOD: PRIVATE(+) io.grpc.Server buildGrpcServer(io.grpc.ServerBuilder<T>)
		GENERIC TEMPLATES: +++ T:io.grpc.ServerBuilder<T>
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.common.proto.Worker$ExplainResponse calculateExplainPlanForStage(org.apache.pinot.common.proto.Worker$StagePlan, org.apache.pinot.query.routing.WorkerMetadata[], java.util.Map<java.lang.String,java.lang.String>)
	+++  NEW METHOD: PRIVATE(+) org.apache.pinot.query.routing.StagePlan deserializePlan(org.apache.pinot.common.proto.Worker$StagePlan)
	+++  NEW METHOD: PRIVATE(+) void explainInternal(org.apache.pinot.common.proto.Worker$QueryRequest, io.grpc.stub.StreamObserver<org.apache.pinot.common.proto.Worker$ExplainResponse>, java.util.Map<java.lang.String,java.lang.String>)
	---! REMOVED METHOD: void forEachStage(org.apache.pinot.common.proto.Worker$QueryRequest, java.util.function.BiFunction<org.apache.pinot.query.routing.StagePlan,org.apache.pinot.query.routing.WorkerMetadata,W>, java.util.function.Consumer<java.util.List<W>>)
		---  REMOVED EXCEPTION: java.util.concurrent.ExecutionException
		---  REMOVED EXCEPTION: java.lang.InterruptedException
		---  REMOVED EXCEPTION: java.util.concurrent.TimeoutException
		GENERIC TEMPLATES: --- W:java.lang.Object
	+++  NEW METHOD: PRIVATE(+) void submitInternal(org.apache.pinot.common.proto.Worker$QueryRequest, java.util.Map<java.lang.String,java.lang.String>)
	---  REMOVED METHOD: PRIVATE(-) void submitStage(org.apache.pinot.common.proto.Worker$StagePlan, java.util.function.BiFunction<org.apache.pinot.query.routing.StagePlan,org.apache.pinot.query.routing.WorkerMetadata,W>, java.util.function.Consumer<W>)
		GENERIC TEMPLATES: --- W:java.lang.Object
	+++  NEW METHOD: PRIVATE(+) void submitTimeSeriesInternal(org.apache.pinot.common.proto.Worker$TimeSeriesQueryRequest, io.grpc.stub.StreamObserver<org.apache.pinot.common.proto.Worker$TimeSeriesResponse>)
	+++  NEW METHOD: PRIVATE(+) java.util.concurrent.CompletableFuture<java.lang.Void> submitWorker(org.apache.pinot.query.routing.WorkerMetadata, org.apache.pinot.query.routing.StagePlan, java.util.Map<java.lang.String,java.lang.String>)

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-s3-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-s3-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-segment-local-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-segment-local-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.indexsegment.immutable.EmptyIndexSegment  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.datasource.DataSource getDataSource(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.segment.spi.datasource.DataSource getDataSourceNullable(java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.indexsegment.immutable.ImmutableSegmentImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.datasource.DataSource getDataSource(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.segment.spi.datasource.DataSource getDataSourceNullable(java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.indexsegment.mutable.MutableSegmentImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.datasource.DataSource getDataSource(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.segment.spi.datasource.DataSource getDataSourceNullable(java.lang.String)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.realtime.converter.stats.RealtimeSegmentStatsContainer  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED CONSTRUCTOR: PUBLIC(-) RealtimeSegmentStatsContainer(org.apache.pinot.segment.spi.MutableSegment, int[])
	+++  NEW CONSTRUCTOR: PUBLIC(+) RealtimeSegmentStatsContainer(org.apache.pinot.segment.spi.MutableSegment, int[], org.apache.pinot.segment.spi.creator.StatsCollectorConfig)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.realtime.impl.json.MutableJsonIndexImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) org.roaringbitmap.buffer.MutableRoaringBitmap getMatchingDocIds(java.lang.Object)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.segment.creator.impl.stats.MapColumnPreIndexStatsCollector  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.Map<java.lang.String,java.lang.Integer> _keyFrequencies
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.spi.data.ComplexFieldSpec _colFieldSpec
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.String,java.lang.Integer> getAllKeyFrequencies()
***! MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.segment.local.segment.index.datasource.BaseDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.reader.MapIndexReader getMapIndex()
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.datasource.EmptyDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.datasource.ImmutableDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.datasource.MutableDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
===! UNCHANGED CLASS: PUBLIC ABSTRACT org.apache.pinot.segment.local.segment.index.map.BaseMapDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
---! REMOVED CLASS: PUBLIC(-) ABSTRACT(-) org.apache.pinot.segment.local.segment.index.map.BaseMapIndexCreator  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) BaseMapIndexCreator(java.io.File, java.lang.String, org.apache.pinot.spi.config.table.MapIndexConfig)
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.map.ImmutableMapDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.map.MapIndexHandler  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MapIndexHandler(org.apache.pinot.segment.spi.store.SegmentDirectory, java.util.Map<java.lang.String,org.apache.pinot.segment.spi.index.FieldIndexConfigs>, org.apache.pinot.spi.config.table.TableConfig)
	---! REMOVED METHOD: PUBLIC(-) boolean needUpdateIndices(org.apache.pinot.segment.spi.store.SegmentDirectory$Reader)
		---  REMOVED EXCEPTION: java.lang.Exception
	---! REMOVED METHOD: PUBLIC(-) void postUpdateIndicesCleanup(org.apache.pinot.segment.spi.store.SegmentDirectory$Writer)
		---  REMOVED EXCEPTION: java.lang.Exception
	---! REMOVED METHOD: PUBLIC(-) void updateIndices(org.apache.pinot.segment.spi.store.SegmentDirectory$Writer)
		---  REMOVED EXCEPTION: java.lang.Exception
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.map.MapIndexPlugin  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) org.apache.pinot.segment.local.segment.index.map.MapIndexType INSTANCE
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MapIndexPlugin()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.local.segment.index.map.MapIndexType getIndexType()
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.map.MapIndexType  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) java.util.List<java.lang.String> EXTENSIONS
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) java.lang.String INDEX_DISPLAY_NAME
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) java.lang.String MAP_INDEX_READER_CLASS_NAME
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) java.lang.String MAP_INDEX_CREATOR_CLASS_NAME
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) java.lang.String MUTABLE_MAP_INDEX_CLASS_NAME
	---! REMOVED CONSTRUCTOR: PROTECTED(-) MapIndexType()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.ColumnConfigDeserializer<org.apache.pinot.spi.config.table.MapIndexConfig> createDeserializer()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.creator.MapIndexCreator createIndexCreator(org.apache.pinot.segment.spi.creator.IndexCreationContext, org.apache.pinot.spi.config.table.MapIndexConfig)
		---  REMOVED EXCEPTION: java.io.IOException
		---  REMOVED EXCEPTION: java.lang.ClassNotFoundException
		---  REMOVED EXCEPTION: java.lang.NoSuchMethodException
		---  REMOVED EXCEPTION: java.lang.reflect.InvocationTargetException
		---  REMOVED EXCEPTION: java.lang.InstantiationException
		---  REMOVED EXCEPTION: java.lang.IllegalAccessException
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.IndexHandler createIndexHandler(org.apache.pinot.segment.spi.store.SegmentDirectory, java.util.Map<java.lang.String,org.apache.pinot.segment.spi.index.FieldIndexConfigs>, org.apache.pinot.spi.data.Schema, org.apache.pinot.spi.config.table.TableConfig)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.mutable.MutableIndex createMutableIndex(org.apache.pinot.segment.spi.index.mutable.provider.MutableIndexContext, org.apache.pinot.spi.config.table.MapIndexConfig)
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.segment.spi.index.IndexReaderFactory<org.apache.pinot.segment.spi.index.reader.MapIndexReader> createReaderFactory()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.config.table.MapIndexConfig getDefaultConfig()
	---! REMOVED METHOD: PUBLIC(-) java.util.List<java.lang.String> getFileExtensions(org.apache.pinot.segment.spi.ColumnMetadata)
	---! REMOVED METHOD: PUBLIC(-) java.lang.Class<org.apache.pinot.spi.config.table.MapIndexConfig> getIndexConfigClass()
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getPrettyName()
	---! REMOVED METHOD: PROTECTED(-) void handleIndexSpecificCleanup(org.apache.pinot.spi.config.table.TableConfig)
---! REMOVED CLASS: PRIVATE(-) STATIC(-) org.apache.pinot.segment.local.segment.index.map.MapIndexType$ReaderFactory  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) org.apache.pinot.segment.local.segment.index.map.MapIndexType$ReaderFactory INSTANCE
	---  REMOVED CONSTRUCTOR: PRIVATE(-) MapIndexType$ReaderFactory()
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.segment.spi.index.reader.MapIndexReader createIndexReader(org.apache.pinot.segment.spi.memory.PinotDataBuffer, org.apache.pinot.segment.spi.ColumnMetadata, org.apache.pinot.spi.config.table.MapIndexConfig)
	---! REMOVED METHOD: PROTECTED(-) org.apache.pinot.segment.spi.index.IndexType<org.apache.pinot.spi.config.table.MapIndexConfig,org.apache.pinot.segment.spi.index.reader.MapIndexReader,?> getIndexType()
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.map.MutableMapDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.map.MutableMapIndexImpl  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MutableMapIndexImpl(org.apache.pinot.segment.spi.index.mutable.provider.MutableIndexContext, org.apache.pinot.spi.config.table.MapIndexConfig)
	---! REMOVED METHOD: PUBLIC(-) void add(java.lang.Object, int, int)
	---! REMOVED METHOD: PUBLIC(-) void add(java.lang.Object[], int[], int)
	---! REMOVED METHOD: PUBLIC(-) void close()
		---  REMOVED EXCEPTION: java.io.IOException
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.map.NullDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.reader.MapIndexReader getMapIndex()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.segment.local.segment.index.readers.json.ImmutableJsonIndexReader  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) org.roaringbitmap.buffer.MutableRoaringBitmap getMatchingDocIds(java.lang.Object)
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.readers.map.ImmutableMapIndexReader  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.segment.spi.index.reader.ForwardIndexReader _forwardIndexReader
	---! REMOVED FIELD: PROTECTED(-) FINAL(-) org.apache.pinot.segment.spi.memory.PinotDataBuffer _dataBuffer
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.segment.spi.ColumnMetadata _columnMetadata
	---  REMOVED FIELD: PRIVATE(-) STATIC(-) FINAL(-) org.slf4j.Logger LOGGER
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) org.apache.pinot.spi.data.FieldSpec _valueFieldSpec
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ImmutableMapIndexReader(org.apache.pinot.segment.spi.memory.PinotDataBuffer, org.apache.pinot.segment.spi.ColumnMetadata)
	---! REMOVED METHOD: PUBLIC(-) void close()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.compression.ChunkCompressionType getCompressionType()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.data.FieldSpec getKeyFieldSpec(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<org.apache.pinot.segment.spi.index.IndexType,org.apache.pinot.segment.spi.index.IndexReader> getKeyIndexes(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.ColumnMetadata getKeyMetadata(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.index.IndexReader getKeyReader(java.lang.String, org.apache.pinot.segment.spi.index.IndexType)
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<java.lang.String> getKeys()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.data.FieldSpec$DataType getKeyStoredType(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<java.lang.String,java.lang.Object> getMap(int, org.apache.pinot.segment.spi.index.reader.ForwardIndexReaderContext)
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.data.FieldSpec$DataType getStoredType()
	---! REMOVED METHOD: PUBLIC(-) java.lang.String getString(int, org.apache.pinot.segment.spi.index.reader.ForwardIndexReaderContext)
	---! REMOVED METHOD: PUBLIC(-) boolean isDictionaryEncoded()
	---! REMOVED METHOD: PUBLIC(-) boolean isSingleValue()
---! REMOVED CLASS: org.apache.pinot.segment.local.segment.index.readers.map.ImmutableMapIndexReader$1  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: ImmutableMapIndexReader$1(org.apache.pinot.segment.local.segment.index.readers.map.ImmutableMapIndexReader)
	---! REMOVED METHOD: PUBLIC(-) int getBitsPerElement()
	---! REMOVED METHOD: PUBLIC(-) int getCardinality()
	---! REMOVED METHOD: PUBLIC(-) int getColumnMaxLength()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.spi.data.FieldSpec getFieldSpec()
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<org.apache.pinot.segment.spi.index.IndexType<?,?,?>,java.lang.Long> getIndexSizeMap()
	---! REMOVED METHOD: PUBLIC(-) int getMaxNumberOfMultiValues()
	---! REMOVED METHOD: PUBLIC(-) java.lang.Comparable getMaxValue()
	---! REMOVED METHOD: PUBLIC(-) java.lang.Comparable getMinValue()
	---! REMOVED METHOD: PUBLIC(-) org.apache.pinot.segment.spi.partition.PartitionFunction getPartitionFunction()
	---! REMOVED METHOD: PUBLIC(-) java.util.Set<java.lang.Integer> getPartitions()
	---! REMOVED METHOD: PUBLIC(-) int getTotalDocs()
	---! REMOVED METHOD: PUBLIC(-) int getTotalNumberOfEntries()
	---! REMOVED METHOD: PUBLIC(-) boolean hasDictionary()
	---! REMOVED METHOD: PUBLIC(-) boolean isAutoGenerated()
	---! REMOVED METHOD: PUBLIC(-) boolean isSorted()
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.segment.local.segment.index.text.CaseAwareStandardAnalyzer  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW FIELD: PRIVATE(+) int _maxTokenLength
	+++  NEW FIELD: PRIVATE(+) FINAL(+) boolean _caseSensitive
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) int DEFAULT_MAX_TOKEN_LENGTH
	+++  NEW CONSTRUCTOR: PUBLIC(+) CaseAwareStandardAnalyzer(org.apache.lucene.analysis.CharArraySet)
	+++  NEW CONSTRUCTOR: PUBLIC(+) CaseAwareStandardAnalyzer()
	+++  NEW CONSTRUCTOR: PUBLIC(+) CaseAwareStandardAnalyzer(org.apache.lucene.analysis.CharArraySet, boolean)
	+++  NEW METHOD: PROTECTED(+) org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) int getMaxTokenLength()
	+++  NEW METHOD: PUBLIC(+) boolean isCaseSensitive()
	+++  NEW METHOD: PROTECTED(+) org.apache.lucene.analysis.TokenStream normalize(java.lang.String, org.apache.lucene.analysis.TokenStream)
	+++  NEW METHOD: PUBLIC(+) void setMaxTokenLength(int)
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.segment.local.segment.index.text.CaseSensitiveAnalyzer  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---  REMOVED FIELD: PRIVATE(-) int _maxTokenLength
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) int DEFAULT_MAX_TOKEN_LENGTH
	---! REMOVED CONSTRUCTOR: PUBLIC(-) CaseSensitiveAnalyzer(org.apache.lucene.analysis.CharArraySet)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) CaseSensitiveAnalyzer()
	---! REMOVED METHOD: PROTECTED(-) org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) int getMaxTokenLength()
	---! REMOVED METHOD: PUBLIC(-) void setMaxTokenLength(int)
===! UNCHANGED CLASS: PUBLIC org.apache.pinot.segment.local.startree.v2.store.StarTreeDataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-segment-spi-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-segment-spi-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.segment.spi.datasource.DataSource  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) org.apache.pinot.segment.spi.index.reader.MapIndexReader getMapIndex()
---! REMOVED INTERFACE: PUBLIC(-) ABSTRACT(-) org.apache.pinot.segment.spi.index.creator.MapIndexCreator  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.IndexCreator
	---! REMOVED INTERFACE: java.io.Closeable
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.creator.ForwardIndexCreator
	---! REMOVED INTERFACE: java.lang.AutoCloseable
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) int VERSION_1
	---  REMOVED METHOD: PUBLIC(-) void add(java.lang.Object, int)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) void add(java.util.Map<java.lang.String,java.lang.Object>)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.spi.index.ForwardIndexConfig  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.Map<java.lang.String,java.lang.Object> _configs
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ForwardIndexConfig(java.lang.Boolean, org.apache.pinot.spi.config.table.FieldConfig$CompressionCodec, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Integer)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ForwardIndexConfig(java.lang.Boolean, org.apache.pinot.spi.config.table.FieldConfig$CompressionCodec, org.apache.pinot.segment.spi.compression.ChunkCompressionType, org.apache.pinot.segment.spi.compression.DictIdCompressionType, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Integer)
	+++  NEW CONSTRUCTOR: PUBLIC(+) ForwardIndexConfig(java.lang.Boolean, org.apache.pinot.spi.config.table.FieldConfig$CompressionCodec, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Integer, java.util.Map<java.lang.String,java.lang.Object>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) ForwardIndexConfig(java.lang.Boolean, org.apache.pinot.spi.config.table.FieldConfig$CompressionCodec, org.apache.pinot.segment.spi.compression.ChunkCompressionType, org.apache.pinot.segment.spi.compression.DictIdCompressionType, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Integer, java.util.Map<java.lang.String,java.lang.Object>)
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.String,java.lang.Object> getConfigs()
***  MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.segment.spi.index.ForwardIndexConfig$Builder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) java.util.Map<java.lang.String,java.lang.Object> _configs
***  MODIFIED CLASS: PUBLIC org.apache.pinot.segment.spi.index.metadata.SegmentMetadataImpl  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PRIVATE(-) STATIC(-) void addPhysicalColumns(java.util.List, java.util.Collection<java.lang.String>)
	+++  NEW METHOD: PRIVATE(+) STATIC(+) void addPhysicalColumns(java.util.List<java.lang.Object>, java.util.Set<java.lang.String>)
---! REMOVED INTERFACE: PUBLIC(-) ABSTRACT(-) org.apache.pinot.segment.spi.index.mutable.MutableMapIndex  (not serializable)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.mutable.MutableForwardIndex
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.reader.MapIndexReader
	---! REMOVED INTERFACE: java.io.Closeable
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.mutable.MutableIndex
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.IndexReader
	---! REMOVED INTERFACE: org.apache.pinot.segment.spi.index.reader.ForwardIndexReader
	---! REMOVED INTERFACE: java.lang.AutoCloseable
	---! REMOVED SUPERCLASS: java.lang.Object
	---  REMOVED METHOD: PUBLIC(-) void add(java.lang.Object, int, int)
	---  REMOVED METHOD: PUBLIC(-) void add(java.lang.Object[], int[], int)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) void add(java.util.Map<java.lang.String,java.lang.Object>, int)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) java.lang.Comparable<?> getMaxValueForKey(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) java.lang.Comparable<?> getMinValueForKey(java.lang.String)
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.segment.spi.index.reader.JsonIndexReader  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.roaringbitmap.buffer.MutableRoaringBitmap getMatchingDocIds(java.lang.Object)
***! MODIFIED CLASS: PUBLIC org.apache.pinot.segment.spi.index.StandardIndexes  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) java.lang.String MAP_ID
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) org.apache.pinot.segment.spi.index.IndexType<org.apache.pinot.spi.config.table.MapIndexConfig,org.apache.pinot.segment.spi.index.reader.MapIndexReader,org.apache.pinot.segment.spi.index.creator.MapIndexCreator> map()
***  MODIFIED CLASS: PUBLIC org.apache.pinot.segment.spi.index.startree.AggregationSpec  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) boolean shouldModifyStarTree(org.apache.pinot.segment.spi.index.startree.AggregationSpec)
***! MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.segment.spi.IndexSegment  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***! MODIFIED METHOD: PUBLIC NON_ABSTRACT (<- ABSTRACT) org.apache.pinot.segment.spi.datasource.DataSource getDataSource(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.segment.spi.datasource.DataSource getDataSource(java.lang.String, org.apache.pinot.spi.data.Schema)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.segment.spi.datasource.DataSource getDataSourceNullable(java.lang.String)
***! MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.segment.spi.V1Constants$Indexes  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) java.lang.String MAP_FORWARD_INDEX_FILE_EXTENSION
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) java.lang.String MAP_INDEX_FILE_EXTENSION

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-segment-uploader-default-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-segment-uploader-default-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-segment-writer-file-based-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-segment-writer-file-based-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-server-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-server-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
***  MODIFIED CLASS: PUBLIC org.apache.pinot.server.starter.helix.HelixInstanceDataManager  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.core.data.manager.LogicalTableContext getLogicalTableContext(java.lang.String)
***! MODIFIED CLASS: PUBLIC ABSTRACT org.apache.pinot.server.starter.helix.SendStatsPredicate  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.pinot.spi.env.PinotConfiguration)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.pinot.spi.env.PinotConfiguration, org.apache.helix.HelixManager)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean getSendStats()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean isSendStats()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean needWatchForInstanceConfigChange()
***! MODIFIED ENUM: PUBLIC ABSTRACT STATIC org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) org.apache.pinot.server.starter.helix.SendStatsPredicate create()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.helix.HelixManager)
***! MODIFIED ENUM: FINAL org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode$1  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.server.starter.helix.SendStatsPredicate create()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.helix.HelixManager)
***! MODIFIED ENUM: FINAL org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode$2  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.server.starter.helix.SendStatsPredicate create()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.helix.HelixManager)
***! MODIFIED CLASS: org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode$2$1  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PUBLIC(-) boolean getSendStats()
	+++  NEW METHOD: PUBLIC(+) boolean isSendStats()
	+++  NEW METHOD: PUBLIC(+) boolean needWatchForInstanceConfigChange()
***! MODIFIED ENUM: FINAL org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode$3  (compatible)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PUBLIC(-) org.apache.pinot.server.starter.helix.SendStatsPredicate create()
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.server.starter.helix.SendStatsPredicate create(org.apache.helix.HelixManager)
***! MODIFIED CLASS: org.apache.pinot.server.starter.helix.SendStatsPredicate$Mode$3$1  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED METHOD: PUBLIC(-) boolean getSendStats()
	+++  NEW METHOD: PUBLIC(+) boolean isSendStats()
	+++  NEW METHOD: PUBLIC(+) boolean needWatchForInstanceConfigChange()
***! MODIFIED CLASS: PRIVATE STATIC org.apache.pinot.server.starter.helix.SendStatsPredicate$Safe  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	***  MODIFIED FIELD: PRIVATE NON_FINAL (<- FINAL) VOLATILE (<- NON_VOLATILE) boolean (<- java.util.concurrent.atomic.AtomicBoolean) _sendStats
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.lang.String _clusterName
	+++  NEW FIELD: PRIVATE(+) org.apache.helix.HelixAdmin _helixAdmin
	+++  NEW FIELD: PRIVATE(+) FINAL(+) java.util.Map<java.lang.String,java.lang.String> _problematicVersionsById
	+++  NEW FIELD: PRIVATE(+) FINAL(+) org.apache.helix.HelixManager _helixManager
	---  REMOVED CONSTRUCTOR: PRIVATE(-) SendStatsPredicate$Safe()
	+++  NEW CONSTRUCTOR: PUBLIC(+) SendStatsPredicate$Safe(org.apache.helix.HelixManager)
	---  REMOVED METHOD: PUBLIC(-) boolean getSendStats()
	+++  NEW METHOD: PRIVATE(+) java.lang.String getVersion(org.apache.helix.model.InstanceConfig)
	+++  NEW METHOD: PUBLIC(+) boolean isSendStats()
	+++  NEW METHOD: PRIVATE(+) boolean needVersionCheck(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean needWatchForInstanceConfigChange()

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-spark-2-connector-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-spark-2-connector-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-spark-3-connector-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-spark-3-connector-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-spark-common-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-spark-common-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-spi-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-spi-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) org.apache.pinot.spi.auth.broker.RequesterIdentity  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) RequesterIdentity()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getClientIp()
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) org.apache.pinot.spi.auth.server.RequesterIdentity  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) RequesterIdentity()
***! MODIFIED CLASS: PUBLIC org.apache.pinot.spi.config.table.IndexingConfig  (field removed)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	---  REMOVED FIELD: PRIVATE(-) java.util.Map<java.lang.String,org.apache.pinot.spi.config.table.MapIndexConfig> _mapIndexConfigs
	---  REMOVED FIELD: PRIVATE(-) java.util.List<java.lang.String> _mapIndexColumns
	---! REMOVED METHOD: PUBLIC(-) java.util.List<java.lang.String> getMapIndexColumns()
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<java.lang.String,org.apache.pinot.spi.config.table.MapIndexConfig> getMapIndexConfigs()
	---! REMOVED METHOD: PUBLIC(-) void setMapIndexColumns(java.util.List<java.lang.String>)
	---! REMOVED METHOD: PUBLIC(-) void setMapIndexConfigs(java.util.Map<java.lang.String,org.apache.pinot.spi.config.table.MapIndexConfig>)
---! REMOVED CLASS: PUBLIC(-) org.apache.pinot.spi.config.table.MapIndexConfig  (class removed)
	---  CLASS FILE FORMAT VERSION: n.a. <- 55.0
	---! REMOVED INTERFACE: java.io.Serializable
	---! REMOVED SUPERCLASS: org.apache.pinot.spi.config.table.IndexConfig
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) org.apache.pinot.spi.config.table.MapIndexConfig DISABLED
	---  REMOVED FIELD: PRIVATE(-) FINAL(-) java.util.Map<java.lang.String,java.lang.Object> _configs
	---! REMOVED FIELD: PUBLIC(-) STATIC(-) FINAL(-) org.apache.pinot.spi.config.table.MapIndexConfig DEFAULT
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MapIndexConfig(java.lang.Boolean)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MapIndexConfig(java.lang.Boolean, java.util.Map<java.lang.String,java.lang.Object>)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) MapIndexConfig()
	---! REMOVED METHOD: PUBLIC(-) boolean equals(java.lang.Object)
	---! REMOVED METHOD: PUBLIC(-) java.util.Map<java.lang.String,java.lang.Object> getConfigs()
	---! REMOVED METHOD: PUBLIC(-) int hashCode()
	---! REMOVED METHOD: PUBLIC(-) void putConfig(java.lang.String, java.lang.Object)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.spi.data.LogicalTableConfig  (default serialVersionUID changed)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.spi.data.TimeBoundaryConfig _timeBoundaryConfig
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String TIME_BOUNDARY_CONFIG_KEY
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.data.TimeBoundaryConfig getTimeBoundaryConfig()
	+++  NEW METHOD: PUBLIC(+) boolean isHybridLogicalTable()
	+++  NEW METHOD: PUBLIC(+) void setTimeBoundaryConfig(org.apache.pinot.spi.data.TimeBoundaryConfig)
+++  NEW CLASS: PUBLIC(+) org.apache.pinot.spi.data.TimeBoundaryConfig  (compatible)
	+++  CLASS FILE FORMAT VERSION: 55.0 <- n.a.
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: org.apache.pinot.spi.config.BaseJsonConfig
	+++  NEW FIELD: PRIVATE(+) java.lang.String _boundaryStrategy
	+++  NEW FIELD: PRIVATE(+) java.util.Map<java.lang.String,java.lang.Object> _parameters
	+++  NEW CONSTRUCTOR: PUBLIC(+) TimeBoundaryConfig(java.lang.String, java.util.Map<java.lang.String,java.lang.Object>)
	+++  NEW CONSTRUCTOR: PUBLIC(+) TimeBoundaryConfig()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getBoundaryStrategy()
	+++  NEW METHOD: PUBLIC(+) java.util.Map<java.lang.String,java.lang.Object> getParameters()
	+++  NEW METHOD: PUBLIC(+) void setBoundaryStrategy(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void setParameters(java.util.Map<java.lang.String,java.lang.Object>)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.spi.trace.DefaultRequestContext  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	===* UNCHANGED INTERFACE: org.apache.pinot.spi.trace.RequestContext
	+++  NEW FIELD: PRIVATE(+) long _realtimeThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineThreadMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineTotalMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _offlineResponseSerMemAllocatedBytes
	+++  NEW FIELD: PRIVATE(+) long _realtimeResponseSerMemAllocatedBytes
	+++  NEW METHOD: PUBLIC(+) long getOfflineResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getOfflineThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getOfflineTotalMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeResponseSerMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeThreadMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) long getRealtimeTotalMemAllocatedBytes()
	+++  NEW METHOD: PUBLIC(+) void setOfflineResponseSerMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setOfflineThreadMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setOfflineTotalMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setRealtimeResponseSerMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setRealtimeThreadMemAllocatedBytes(long)
	+++  NEW METHOD: PUBLIC(+) void setRealtimeTotalMemAllocatedBytes(long)
**** MODIFIED INTERFACE: PUBLIC ABSTRACT org.apache.pinot.spi.trace.RequestContext  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getOfflineResponseSerMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getOfflineThreadMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getOfflineTotalMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getRealtimeResponseSerMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getRealtimeThreadMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) long getRealtimeTotalMemAllocatedBytes()
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setOfflineResponseSerMemAllocatedBytes(long)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setOfflineThreadMemAllocatedBytes(long)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setOfflineTotalMemAllocatedBytes(long)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setRealtimeResponseSerMemAllocatedBytes(long)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setRealtimeThreadMemAllocatedBytes(long)
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void setRealtimeTotalMemAllocatedBytes(long)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.spi.utils.builder.ControllerRequestURLBuilder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW METHOD: PUBLIC(+) java.lang.String forSegmentMetadata(java.lang.String, org.apache.pinot.spi.config.table.TableType)
	+++  NEW METHOD: PUBLIC(+) java.lang.String forTableTimeBoundary(java.lang.String)
***  MODIFIED CLASS: PUBLIC org.apache.pinot.spi.utils.builder.LogicalTableConfigBuilder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PRIVATE(+) org.apache.pinot.spi.data.TimeBoundaryConfig _timeBoundaryConfig
	+++  NEW METHOD: PUBLIC(+) org.apache.pinot.spi.utils.builder.LogicalTableConfigBuilder setTimeBoundaryConfig(org.apache.pinot.spi.data.TimeBoundaryConfig)
***  MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.spi.utils.CommonConstants$Broker$Request$QueryOptionKey  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String ACCURATE_GROUP_BY_WITHOUT_ORDER_BY
***  MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.spi.utils.CommonConstants$Segment$BuiltInVirtualColumn  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.util.Set<java.lang.String> BUILT_IN_VIRTUAL_COLUMNS
***  MODIFIED CLASS: PUBLIC STATIC org.apache.pinot.spi.utils.CommonConstants$Server  (not serializable)
	===  CLASS FILE FORMAT VERSION: 55.0 <- 55.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String DEFAULT_TIMESERIES_EXEC_CONFIG_PREFIX
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String DEFAULT_MULTISTAGE_SUBMISSION_EXEC_TYPE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String MULTISTAGE_TIMESERIES_EXEC_CONFIG_PREFIX
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.String MULTISTAGE_SUBMISSION_EXEC_CONFIG_PREFIX

Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-thrift-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-thrift-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-timeseries-m3ql-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-timeseries-m3ql-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-timeseries-planner-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-timeseries-planner-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-timeseries-spi-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-timeseries-spi-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-tools-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-tools-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
Comparing source compatibility of /Users/mjack/LI_Projects/pinot/commit_jars_new/pinot-yammer-1.4.0-SNAPSHOT.jar against /Users/mjack/LI_Projects/pinot/commit_jars_old/pinot-yammer-1.4.0-SNAPSHOT.jar
WARNING: You are using the option '--ignore-missing-classes', i.e. superclasses and interfaces that could not be found on the classpath are ignored. Hence changes caused by these superclasses and interfaces are not reflected in the output.
No changes.
